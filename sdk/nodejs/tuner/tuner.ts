// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Tuner extends pulumi.CustomResource {
    /**
     * Get an existing Tuner resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Tuner {
        return new Tuner(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'svmkit:tuner:Tuner';

    /**
     * Returns true if the given object is an instance of Tuner.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tuner {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tuner.__pulumiType;
    }

    public readonly connection!: pulumi.Output<outputs.ssh.Connection>;
    public readonly params!: pulumi.Output<outputs.tuner.TunerParams>;
    public readonly runnerConfig!: pulumi.Output<outputs.runner.Config | undefined>;

    /**
     * Create a Tuner resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TunerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.params === undefined) && !opts.urn) {
                throw new Error("Missing required property 'params'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(inputs.ssh.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["runnerConfig"] = args ? args.runnerConfig : undefined;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["params"] = undefined /*out*/;
            resourceInputs["runnerConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tuner.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Tuner resource.
 */
export interface TunerArgs {
    connection: pulumi.Input<inputs.ssh.ConnectionArgs>;
    params: pulumi.Input<inputs.tuner.TunerParamsArgs>;
    runnerConfig?: pulumi.Input<inputs.runner.ConfigArgs>;
}
