// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Agave extends pulumi.CustomResource {
    /**
     * Get an existing Agave resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Agave {
        return new Agave(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'svmkit:validator:Agave';

    /**
     * Returns true if the given object is an instance of Agave.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Agave {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Agave.__pulumiType;
    }

    declare public readonly connection: pulumi.Output<outputs.ssh.Connection>;
    declare public readonly deletionPolicy: pulumi.Output<enums.deletion.Policy | undefined>;
    declare public readonly environment: pulumi.Output<outputs.solana.Environment | undefined>;
    declare public readonly flags: pulumi.Output<outputs.agave.Flags>;
    declare public readonly geyserPlugin: pulumi.Output<outputs.geyser.GeyserPlugin | undefined>;
    declare public readonly info: pulumi.Output<outputs.solana.ValidatorInfo | undefined>;
    declare public readonly keyPairs: pulumi.Output<outputs.agave.KeyPairs>;
    declare public readonly metrics: pulumi.Output<outputs.agave.Metrics | undefined>;
    declare public readonly runnerConfig: pulumi.Output<outputs.runner.Config | undefined>;
    declare public readonly shutdownPolicy: pulumi.Output<outputs.agave.ShutdownPolicy | undefined>;
    declare public readonly startupPolicy: pulumi.Output<outputs.agave.StartupPolicy | undefined>;
    declare public /*out*/ readonly systemdServiceName: pulumi.Output<string>;
    declare public readonly timeoutConfig: pulumi.Output<outputs.agave.TimeoutConfig | undefined>;
    declare public readonly triggers: pulumi.Output<any[] | undefined>;
    declare public readonly variant: pulumi.Output<enums.agave.Variant | undefined>;
    declare public readonly version: pulumi.Output<string | undefined>;

    /**
     * Create a Agave resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgaveArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.connection === undefined && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if (args?.flags === undefined && !opts.urn) {
                throw new Error("Missing required property 'flags'");
            }
            if (args?.keyPairs === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyPairs'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(inputs.ssh.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["deletionPolicy"] = args?.deletionPolicy;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["flags"] = args?.flags;
            resourceInputs["geyserPlugin"] = args?.geyserPlugin;
            resourceInputs["info"] = args?.info;
            resourceInputs["keyPairs"] = args?.keyPairs;
            resourceInputs["metrics"] = args?.metrics;
            resourceInputs["runnerConfig"] = args?.runnerConfig;
            resourceInputs["shutdownPolicy"] = args?.shutdownPolicy;
            resourceInputs["startupPolicy"] = args?.startupPolicy;
            resourceInputs["timeoutConfig"] = args?.timeoutConfig;
            resourceInputs["triggers"] = args?.triggers;
            resourceInputs["variant"] = args?.variant;
            resourceInputs["version"] = args?.version;
            resourceInputs["systemdServiceName"] = undefined /*out*/;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["deletionPolicy"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["flags"] = undefined /*out*/;
            resourceInputs["geyserPlugin"] = undefined /*out*/;
            resourceInputs["info"] = undefined /*out*/;
            resourceInputs["keyPairs"] = undefined /*out*/;
            resourceInputs["metrics"] = undefined /*out*/;
            resourceInputs["runnerConfig"] = undefined /*out*/;
            resourceInputs["shutdownPolicy"] = undefined /*out*/;
            resourceInputs["startupPolicy"] = undefined /*out*/;
            resourceInputs["systemdServiceName"] = undefined /*out*/;
            resourceInputs["timeoutConfig"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["variant"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Agave.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Agave resource.
 */
export interface AgaveArgs {
    connection: pulumi.Input<inputs.ssh.ConnectionArgs>;
    deletionPolicy?: pulumi.Input<enums.deletion.Policy>;
    environment?: pulumi.Input<inputs.solana.EnvironmentArgs>;
    flags: pulumi.Input<inputs.agave.FlagsArgs>;
    geyserPlugin?: pulumi.Input<inputs.geyser.GeyserPluginArgs>;
    info?: pulumi.Input<inputs.solana.ValidatorInfoArgs>;
    keyPairs: pulumi.Input<inputs.agave.KeyPairsArgs>;
    metrics?: pulumi.Input<inputs.agave.MetricsArgs>;
    runnerConfig?: pulumi.Input<inputs.runner.ConfigArgs>;
    shutdownPolicy?: pulumi.Input<inputs.agave.ShutdownPolicyArgs>;
    startupPolicy?: pulumi.Input<inputs.agave.StartupPolicyArgs>;
    timeoutConfig?: pulumi.Input<inputs.agave.TimeoutConfigArgs>;
    triggers?: pulumi.Input<any[]>;
    variant?: pulumi.Input<enums.agave.Variant>;
    version?: pulumi.Input<string>;
}
