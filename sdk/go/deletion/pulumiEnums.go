// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deletion

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Policy string

const (
	// Do not delete files upon destroying their associated component
	PolicyKeep = Policy("keep")
	// Delete files upon destroying their associated component; if the files exist before the component is created, will throw an error
	PolicyDelete = Policy("delete")
	// Delete files upon destroying their associated component, and overwrite existing files on creation â€” use with caution
	Policy_Delete_And_Force_Creation = Policy("delete-and-force-creation")
)

func (Policy) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (e Policy) ToPolicyOutput() PolicyOutput {
	return pulumi.ToOutput(e).(PolicyOutput)
}

func (e Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyOutput)
}

func (e Policy) ToPolicyPtrOutput() PolicyPtrOutput {
	return e.ToPolicyPtrOutputWithContext(context.Background())
}

func (e Policy) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return Policy(e).ToPolicyOutputWithContext(ctx).ToPolicyPtrOutputWithContext(ctx)
}

func (e Policy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Policy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Policy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Policy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

func (o PolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Policy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Policy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy {
		if v != nil {
			return *v
		}
		var ret Policy
		return ret
	}).(PolicyOutput)
}

func (o PolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Policy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyInput is an input type that accepts values of the Policy enum
// A concrete instance of `PolicyInput` can be one of the following:
//
//	PolicyKeep
//	PolicyDelete
//	Policy_Delete_And_Force_Creation
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

var policyPtrType = reflect.TypeOf((**Policy)(nil)).Elem()

type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtr string

func PolicyPtr(v string) PolicyPtrInput {
	return (*policyPtr)(&v)
}

func (*policyPtr) ElementType() reflect.Type {
	return policyPtrType
}

func (in *policyPtr) ToPolicyPtrOutput() PolicyPtrOutput {
	return pulumi.ToOutput(in).(PolicyPtrOutput)
}

func (in *policyPtr) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), Policy("keep"))
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPtrInput)(nil)).Elem(), Policy("keep"))
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
}
