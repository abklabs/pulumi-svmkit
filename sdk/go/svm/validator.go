// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package svm

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-svm/sdk/go/svm/agave"
	"example.com/pulumi-svm/sdk/go/svm/internal"
	"example.com/pulumi-svm/sdk/go/svm/ssh"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Validator struct {
	pulumi.CustomResourceState

	Connection ssh.ConnectionOutput          `pulumi:"connection"`
	Flags      agave.ValidatorFlagsOutput    `pulumi:"flags"`
	KeyPairs   agave.ValidatorKeyPairsOutput `pulumi:"keyPairs"`
	Variant    pulumi.StringPtrOutput        `pulumi:"variant"`
}

// NewValidator registers a new resource with the given unique name, arguments, and options.
func NewValidator(ctx *pulumi.Context,
	name string, args *ValidatorArgs, opts ...pulumi.ResourceOption) (*Validator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Flags == nil {
		return nil, errors.New("invalid value for required argument 'Flags'")
	}
	if args.KeyPairs == nil {
		return nil, errors.New("invalid value for required argument 'KeyPairs'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v ssh.Connection) ssh.Connection { return *v.Defaults() }).(ssh.ConnectionOutput)
	if args.KeyPairs != nil {
		args.KeyPairs = pulumi.ToSecret(args.KeyPairs).(agave.ValidatorKeyPairsInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"keyPairs",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Validator
	err := ctx.RegisterResource("svm:index:Validator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetValidator gets an existing Validator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetValidator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ValidatorState, opts ...pulumi.ResourceOption) (*Validator, error) {
	var resource Validator
	err := ctx.ReadResource("svm:index:Validator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Validator resources.
type validatorState struct {
}

type ValidatorState struct {
}

func (ValidatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*validatorState)(nil)).Elem()
}

type validatorArgs struct {
	Connection ssh.Connection          `pulumi:"connection"`
	Flags      agave.ValidatorFlags    `pulumi:"flags"`
	KeyPairs   agave.ValidatorKeyPairs `pulumi:"keyPairs"`
	Variant    *string                 `pulumi:"variant"`
}

// The set of arguments for constructing a Validator resource.
type ValidatorArgs struct {
	Connection ssh.ConnectionInput
	Flags      agave.ValidatorFlagsInput
	KeyPairs   agave.ValidatorKeyPairsInput
	Variant    pulumi.StringPtrInput
}

func (ValidatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*validatorArgs)(nil)).Elem()
}

type ValidatorInput interface {
	pulumi.Input

	ToValidatorOutput() ValidatorOutput
	ToValidatorOutputWithContext(ctx context.Context) ValidatorOutput
}

func (*Validator) ElementType() reflect.Type {
	return reflect.TypeOf((**Validator)(nil)).Elem()
}

func (i *Validator) ToValidatorOutput() ValidatorOutput {
	return i.ToValidatorOutputWithContext(context.Background())
}

func (i *Validator) ToValidatorOutputWithContext(ctx context.Context) ValidatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidatorOutput)
}

type ValidatorOutput struct{ *pulumi.OutputState }

func (ValidatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Validator)(nil)).Elem()
}

func (o ValidatorOutput) ToValidatorOutput() ValidatorOutput {
	return o
}

func (o ValidatorOutput) ToValidatorOutputWithContext(ctx context.Context) ValidatorOutput {
	return o
}

func (o ValidatorOutput) Connection() ssh.ConnectionOutput {
	return o.ApplyT(func(v *Validator) ssh.ConnectionOutput { return v.Connection }).(ssh.ConnectionOutput)
}

func (o ValidatorOutput) Flags() agave.ValidatorFlagsOutput {
	return o.ApplyT(func(v *Validator) agave.ValidatorFlagsOutput { return v.Flags }).(agave.ValidatorFlagsOutput)
}

func (o ValidatorOutput) KeyPairs() agave.ValidatorKeyPairsOutput {
	return o.ApplyT(func(v *Validator) agave.ValidatorKeyPairsOutput { return v.KeyPairs }).(agave.ValidatorKeyPairsOutput)
}

func (o ValidatorOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Validator) pulumi.StringPtrOutput { return v.Variant }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ValidatorInput)(nil)).Elem(), &Validator{})
	pulumi.RegisterOutputType(ValidatorOutput{})
}
