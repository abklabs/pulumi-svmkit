// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package agave

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Variant string

const (
	// The Solana validator
	VariantSolana = Variant("solana")
	// The Agave validator
	VariantAgave = Variant("agave")
	// The Powerledger validator
	VariantPowerledger = Variant("powerledger")
	// The Jito validator
	VariantJito = Variant("jito")
	// The Pyth validator
	VariantPyth = Variant("pyth")
	// The Mantis validator
	VariantMantis = Variant("mantis")
	// The Xen validator
	VariantXen = Variant("xen")
)

func (Variant) ElementType() reflect.Type {
	return reflect.TypeOf((*Variant)(nil)).Elem()
}

func (e Variant) ToVariantOutput() VariantOutput {
	return pulumi.ToOutput(e).(VariantOutput)
}

func (e Variant) ToVariantOutputWithContext(ctx context.Context) VariantOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VariantOutput)
}

func (e Variant) ToVariantPtrOutput() VariantPtrOutput {
	return e.ToVariantPtrOutputWithContext(context.Background())
}

func (e Variant) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return Variant(e).ToVariantOutputWithContext(ctx).ToVariantPtrOutputWithContext(ctx)
}

func (e Variant) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Variant) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Variant) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Variant) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VariantOutput struct{ *pulumi.OutputState }

func (VariantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Variant)(nil)).Elem()
}

func (o VariantOutput) ToVariantOutput() VariantOutput {
	return o
}

func (o VariantOutput) ToVariantOutputWithContext(ctx context.Context) VariantOutput {
	return o
}

func (o VariantOutput) ToVariantPtrOutput() VariantPtrOutput {
	return o.ToVariantPtrOutputWithContext(context.Background())
}

func (o VariantOutput) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Variant) *Variant {
		return &v
	}).(VariantPtrOutput)
}

func (o VariantOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VariantOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Variant) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VariantOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariantOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Variant) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VariantPtrOutput struct{ *pulumi.OutputState }

func (VariantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Variant)(nil)).Elem()
}

func (o VariantPtrOutput) ToVariantPtrOutput() VariantPtrOutput {
	return o
}

func (o VariantPtrOutput) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return o
}

func (o VariantPtrOutput) Elem() VariantOutput {
	return o.ApplyT(func(v *Variant) Variant {
		if v != nil {
			return *v
		}
		var ret Variant
		return ret
	}).(VariantOutput)
}

func (o VariantPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariantPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Variant) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VariantInput is an input type that accepts values of the Variant enum
// A concrete instance of `VariantInput` can be one of the following:
//
//	VariantSolana
//	VariantAgave
//	VariantPowerledger
//	VariantJito
//	VariantPyth
//	VariantMantis
//	VariantXen
type VariantInput interface {
	pulumi.Input

	ToVariantOutput() VariantOutput
	ToVariantOutputWithContext(context.Context) VariantOutput
}

var variantPtrType = reflect.TypeOf((**Variant)(nil)).Elem()

type VariantPtrInput interface {
	pulumi.Input

	ToVariantPtrOutput() VariantPtrOutput
	ToVariantPtrOutputWithContext(context.Context) VariantPtrOutput
}

type variantPtr string

func VariantPtr(v string) VariantPtrInput {
	return (*variantPtr)(&v)
}

func (*variantPtr) ElementType() reflect.Type {
	return variantPtrType
}

func (in *variantPtr) ToVariantPtrOutput() VariantPtrOutput {
	return pulumi.ToOutput(in).(VariantPtrOutput)
}

func (in *variantPtr) ToVariantPtrOutputWithContext(ctx context.Context) VariantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VariantPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VariantInput)(nil)).Elem(), Variant("solana"))
	pulumi.RegisterInputType(reflect.TypeOf((*VariantPtrInput)(nil)).Elem(), Variant("solana"))
	pulumi.RegisterOutputType(VariantOutput{})
	pulumi.RegisterOutputType(VariantPtrOutput{})
}
