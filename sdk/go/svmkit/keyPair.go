// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package svmkit

import (
	"context"
	"reflect"

	"github.com/abklabs/svmkit/sdk/go/svmkit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KeyPair struct {
	pulumi.CustomResourceState

	Json       pulumi.StringOutput   `pulumi:"json"`
	PrivateKey pulumi.IntArrayOutput `pulumi:"privateKey"`
	PublicKey  pulumi.StringOutput   `pulumi:"publicKey"`
}

// NewKeyPair registers a new resource with the given unique name, arguments, and options.
func NewKeyPair(ctx *pulumi.Context,
	name string, args *KeyPairArgs, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	if args == nil {
		args = &KeyPairArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"json",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyPair
	err := ctx.RegisterResource("svmkit:index:KeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyPair gets an existing KeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyPairState, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	var resource KeyPair
	err := ctx.ReadResource("svmkit:index:KeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyPair resources.
type keyPairState struct {
}

type KeyPairState struct {
}

func (KeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairState)(nil)).Elem()
}

type keyPairArgs struct {
}

// The set of arguments for constructing a KeyPair resource.
type KeyPairArgs struct {
}

func (KeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairArgs)(nil)).Elem()
}

type KeyPairInput interface {
	pulumi.Input

	ToKeyPairOutput() KeyPairOutput
	ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput
}

func (*KeyPair) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPair)(nil)).Elem()
}

func (i *KeyPair) ToKeyPairOutput() KeyPairOutput {
	return i.ToKeyPairOutputWithContext(context.Background())
}

func (i *KeyPair) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairOutput)
}

type KeyPairOutput struct{ *pulumi.OutputState }

func (KeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPair)(nil)).Elem()
}

func (o KeyPairOutput) ToKeyPairOutput() KeyPairOutput {
	return o
}

func (o KeyPairOutput) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return o
}

func (o KeyPairOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.Json }).(pulumi.StringOutput)
}

func (o KeyPairOutput) PrivateKey() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.IntArrayOutput { return v.PrivateKey }).(pulumi.IntArrayOutput)
}

func (o KeyPairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairInput)(nil)).Elem(), &KeyPair{})
	pulumi.RegisterOutputType(KeyPairOutput{})
}
