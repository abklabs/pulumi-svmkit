// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package agave

import (
	"context"
	"reflect"

	"github.com/abklabs/svmkit/sdk/go/svmkit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Flags struct {
	BlockProductionMethod        string   `pulumi:"blockProductionMethod"`
	DynamicPortRange             string   `pulumi:"dynamicPortRange"`
	EntryPoint                   []string `pulumi:"entryPoint"`
	ExpectedGenesisHash          *string  `pulumi:"expectedGenesisHash"`
	FullRpcAPI                   *bool    `pulumi:"fullRpcAPI"`
	FullSnapshotIntervalSlots    int      `pulumi:"fullSnapshotIntervalSlots"`
	GossipPort                   int      `pulumi:"gossipPort"`
	KnownValidator               []string `pulumi:"knownValidator"`
	LimitLedgerSize              int      `pulumi:"limitLedgerSize"`
	NoVoting                     *bool    `pulumi:"noVoting"`
	NoWaitForVoteToStartLeader   bool     `pulumi:"noWaitForVoteToStartLeader"`
	OnlyKnownRPC                 bool     `pulumi:"onlyKnownRPC"`
	PrivateRPC                   bool     `pulumi:"privateRPC"`
	RpcBindAddress               string   `pulumi:"rpcBindAddress"`
	RpcPort                      int      `pulumi:"rpcPort"`
	TvuReceiveThreads            *int     `pulumi:"tvuReceiveThreads"`
	UseSnapshotArchivesAtStartup string   `pulumi:"useSnapshotArchivesAtStartup"`
	WalRecoveryMode              string   `pulumi:"walRecoveryMode"`
}

// FlagsInput is an input type that accepts FlagsArgs and FlagsOutput values.
// You can construct a concrete instance of `FlagsInput` via:
//
//	FlagsArgs{...}
type FlagsInput interface {
	pulumi.Input

	ToFlagsOutput() FlagsOutput
	ToFlagsOutputWithContext(context.Context) FlagsOutput
}

type FlagsArgs struct {
	BlockProductionMethod        pulumi.StringInput      `pulumi:"blockProductionMethod"`
	DynamicPortRange             pulumi.StringInput      `pulumi:"dynamicPortRange"`
	EntryPoint                   pulumi.StringArrayInput `pulumi:"entryPoint"`
	ExpectedGenesisHash          pulumi.StringPtrInput   `pulumi:"expectedGenesisHash"`
	FullRpcAPI                   pulumi.BoolPtrInput     `pulumi:"fullRpcAPI"`
	FullSnapshotIntervalSlots    pulumi.IntInput         `pulumi:"fullSnapshotIntervalSlots"`
	GossipPort                   pulumi.IntInput         `pulumi:"gossipPort"`
	KnownValidator               pulumi.StringArrayInput `pulumi:"knownValidator"`
	LimitLedgerSize              pulumi.IntInput         `pulumi:"limitLedgerSize"`
	NoVoting                     pulumi.BoolPtrInput     `pulumi:"noVoting"`
	NoWaitForVoteToStartLeader   pulumi.BoolInput        `pulumi:"noWaitForVoteToStartLeader"`
	OnlyKnownRPC                 pulumi.BoolInput        `pulumi:"onlyKnownRPC"`
	PrivateRPC                   pulumi.BoolInput        `pulumi:"privateRPC"`
	RpcBindAddress               pulumi.StringInput      `pulumi:"rpcBindAddress"`
	RpcPort                      pulumi.IntInput         `pulumi:"rpcPort"`
	TvuReceiveThreads            pulumi.IntPtrInput      `pulumi:"tvuReceiveThreads"`
	UseSnapshotArchivesAtStartup pulumi.StringInput      `pulumi:"useSnapshotArchivesAtStartup"`
	WalRecoveryMode              pulumi.StringInput      `pulumi:"walRecoveryMode"`
}

func (FlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Flags)(nil)).Elem()
}

func (i FlagsArgs) ToFlagsOutput() FlagsOutput {
	return i.ToFlagsOutputWithContext(context.Background())
}

func (i FlagsArgs) ToFlagsOutputWithContext(ctx context.Context) FlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlagsOutput)
}

type FlagsOutput struct{ *pulumi.OutputState }

func (FlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Flags)(nil)).Elem()
}

func (o FlagsOutput) ToFlagsOutput() FlagsOutput {
	return o
}

func (o FlagsOutput) ToFlagsOutputWithContext(ctx context.Context) FlagsOutput {
	return o
}

func (o FlagsOutput) BlockProductionMethod() pulumi.StringOutput {
	return o.ApplyT(func(v Flags) string { return v.BlockProductionMethod }).(pulumi.StringOutput)
}

func (o FlagsOutput) DynamicPortRange() pulumi.StringOutput {
	return o.ApplyT(func(v Flags) string { return v.DynamicPortRange }).(pulumi.StringOutput)
}

func (o FlagsOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Flags) []string { return v.EntryPoint }).(pulumi.StringArrayOutput)
}

func (o FlagsOutput) ExpectedGenesisHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Flags) *string { return v.ExpectedGenesisHash }).(pulumi.StringPtrOutput)
}

func (o FlagsOutput) FullRpcAPI() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Flags) *bool { return v.FullRpcAPI }).(pulumi.BoolPtrOutput)
}

func (o FlagsOutput) FullSnapshotIntervalSlots() pulumi.IntOutput {
	return o.ApplyT(func(v Flags) int { return v.FullSnapshotIntervalSlots }).(pulumi.IntOutput)
}

func (o FlagsOutput) GossipPort() pulumi.IntOutput {
	return o.ApplyT(func(v Flags) int { return v.GossipPort }).(pulumi.IntOutput)
}

func (o FlagsOutput) KnownValidator() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Flags) []string { return v.KnownValidator }).(pulumi.StringArrayOutput)
}

func (o FlagsOutput) LimitLedgerSize() pulumi.IntOutput {
	return o.ApplyT(func(v Flags) int { return v.LimitLedgerSize }).(pulumi.IntOutput)
}

func (o FlagsOutput) NoVoting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Flags) *bool { return v.NoVoting }).(pulumi.BoolPtrOutput)
}

func (o FlagsOutput) NoWaitForVoteToStartLeader() pulumi.BoolOutput {
	return o.ApplyT(func(v Flags) bool { return v.NoWaitForVoteToStartLeader }).(pulumi.BoolOutput)
}

func (o FlagsOutput) OnlyKnownRPC() pulumi.BoolOutput {
	return o.ApplyT(func(v Flags) bool { return v.OnlyKnownRPC }).(pulumi.BoolOutput)
}

func (o FlagsOutput) PrivateRPC() pulumi.BoolOutput {
	return o.ApplyT(func(v Flags) bool { return v.PrivateRPC }).(pulumi.BoolOutput)
}

func (o FlagsOutput) RpcBindAddress() pulumi.StringOutput {
	return o.ApplyT(func(v Flags) string { return v.RpcBindAddress }).(pulumi.StringOutput)
}

func (o FlagsOutput) RpcPort() pulumi.IntOutput {
	return o.ApplyT(func(v Flags) int { return v.RpcPort }).(pulumi.IntOutput)
}

func (o FlagsOutput) TvuReceiveThreads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Flags) *int { return v.TvuReceiveThreads }).(pulumi.IntPtrOutput)
}

func (o FlagsOutput) UseSnapshotArchivesAtStartup() pulumi.StringOutput {
	return o.ApplyT(func(v Flags) string { return v.UseSnapshotArchivesAtStartup }).(pulumi.StringOutput)
}

func (o FlagsOutput) WalRecoveryMode() pulumi.StringOutput {
	return o.ApplyT(func(v Flags) string { return v.WalRecoveryMode }).(pulumi.StringOutput)
}

type KeyPairs struct {
	Identity    string `pulumi:"identity"`
	VoteAccount string `pulumi:"voteAccount"`
}

// KeyPairsInput is an input type that accepts KeyPairsArgs and KeyPairsOutput values.
// You can construct a concrete instance of `KeyPairsInput` via:
//
//	KeyPairsArgs{...}
type KeyPairsInput interface {
	pulumi.Input

	ToKeyPairsOutput() KeyPairsOutput
	ToKeyPairsOutputWithContext(context.Context) KeyPairsOutput
}

type KeyPairsArgs struct {
	Identity    pulumi.StringInput `pulumi:"identity"`
	VoteAccount pulumi.StringInput `pulumi:"voteAccount"`
}

func (KeyPairsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPairs)(nil)).Elem()
}

func (i KeyPairsArgs) ToKeyPairsOutput() KeyPairsOutput {
	return i.ToKeyPairsOutputWithContext(context.Background())
}

func (i KeyPairsArgs) ToKeyPairsOutputWithContext(ctx context.Context) KeyPairsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairsOutput)
}

type KeyPairsOutput struct{ *pulumi.OutputState }

func (KeyPairsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPairs)(nil)).Elem()
}

func (o KeyPairsOutput) ToKeyPairsOutput() KeyPairsOutput {
	return o
}

func (o KeyPairsOutput) ToKeyPairsOutputWithContext(ctx context.Context) KeyPairsOutput {
	return o
}

func (o KeyPairsOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairs) string { return v.Identity }).(pulumi.StringOutput)
}

func (o KeyPairsOutput) VoteAccount() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairs) string { return v.VoteAccount }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlagsInput)(nil)).Elem(), FlagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairsInput)(nil)).Elem(), KeyPairsArgs{})
	pulumi.RegisterOutputType(FlagsOutput{})
	pulumi.RegisterOutputType(KeyPairsOutput{})
}
