// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package faucet

import (
	"context"
	"reflect"

	"github.com/abklabs/pulumi-svmkit/sdk/go/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type FaucetFlags struct {
	AllowIPs      []string `pulumi:"allowIPs"`
	PerRequestCap *int     `pulumi:"perRequestCap"`
	PerTimeCap    *int     `pulumi:"perTimeCap"`
	SliceSeconds  *int     `pulumi:"sliceSeconds"`
}

// FaucetFlagsInput is an input type that accepts FaucetFlagsArgs and FaucetFlagsOutput values.
// You can construct a concrete instance of `FaucetFlagsInput` via:
//
//	FaucetFlagsArgs{...}
type FaucetFlagsInput interface {
	pulumi.Input

	ToFaucetFlagsOutput() FaucetFlagsOutput
	ToFaucetFlagsOutputWithContext(context.Context) FaucetFlagsOutput
}

type FaucetFlagsArgs struct {
	AllowIPs      pulumi.StringArrayInput `pulumi:"allowIPs"`
	PerRequestCap pulumi.IntPtrInput      `pulumi:"perRequestCap"`
	PerTimeCap    pulumi.IntPtrInput      `pulumi:"perTimeCap"`
	SliceSeconds  pulumi.IntPtrInput      `pulumi:"sliceSeconds"`
}

func (FaucetFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FaucetFlags)(nil)).Elem()
}

func (i FaucetFlagsArgs) ToFaucetFlagsOutput() FaucetFlagsOutput {
	return i.ToFaucetFlagsOutputWithContext(context.Background())
}

func (i FaucetFlagsArgs) ToFaucetFlagsOutputWithContext(ctx context.Context) FaucetFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaucetFlagsOutput)
}

type FaucetFlagsOutput struct{ *pulumi.OutputState }

func (FaucetFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FaucetFlags)(nil)).Elem()
}

func (o FaucetFlagsOutput) ToFaucetFlagsOutput() FaucetFlagsOutput {
	return o
}

func (o FaucetFlagsOutput) ToFaucetFlagsOutputWithContext(ctx context.Context) FaucetFlagsOutput {
	return o
}

func (o FaucetFlagsOutput) AllowIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FaucetFlags) []string { return v.AllowIPs }).(pulumi.StringArrayOutput)
}

func (o FaucetFlagsOutput) PerRequestCap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FaucetFlags) *int { return v.PerRequestCap }).(pulumi.IntPtrOutput)
}

func (o FaucetFlagsOutput) PerTimeCap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FaucetFlags) *int { return v.PerTimeCap }).(pulumi.IntPtrOutput)
}

func (o FaucetFlagsOutput) SliceSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FaucetFlags) *int { return v.SliceSeconds }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FaucetFlagsInput)(nil)).Elem(), FaucetFlagsArgs{})
	pulumi.RegisterOutputType(FaucetFlagsOutput{})
}
