// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package faucet

import (
	"context"
	"reflect"

	"errors"
	"github.com/abklabs/pulumi-svmkit/sdk/go/internal"
	"github.com/abklabs/pulumi-svmkit/sdk/go/runner"
	"github.com/abklabs/pulumi-svmkit/sdk/go/ssh"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Faucet struct {
	pulumi.CustomResourceState

	Connection   ssh.ConnectionOutput   `pulumi:"connection"`
	Flags        FaucetFlagsOutput      `pulumi:"flags"`
	Keypair      pulumi.StringOutput    `pulumi:"keypair"`
	RunnerConfig runner.ConfigPtrOutput `pulumi:"runnerConfig"`
	Triggers     pulumi.ArrayOutput     `pulumi:"triggers"`
	Version      pulumi.StringPtrOutput `pulumi:"version"`
}

// NewFaucet registers a new resource with the given unique name, arguments, and options.
func NewFaucet(ctx *pulumi.Context,
	name string, args *FaucetArgs, opts ...pulumi.ResourceOption) (*Faucet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Flags == nil {
		return nil, errors.New("invalid value for required argument 'Flags'")
	}
	if args.Keypair == nil {
		return nil, errors.New("invalid value for required argument 'Keypair'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v ssh.Connection) ssh.Connection { return *v.Defaults() }).(ssh.ConnectionOutput)
	if args.Keypair != nil {
		args.Keypair = pulumi.ToSecret(args.Keypair).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"keypair",
	})
	opts = append(opts, secrets)
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"triggers[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Faucet
	err := ctx.RegisterResource("svmkit:faucet:Faucet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFaucet gets an existing Faucet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFaucet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FaucetState, opts ...pulumi.ResourceOption) (*Faucet, error) {
	var resource Faucet
	err := ctx.ReadResource("svmkit:faucet:Faucet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Faucet resources.
type faucetState struct {
}

type FaucetState struct {
}

func (FaucetState) ElementType() reflect.Type {
	return reflect.TypeOf((*faucetState)(nil)).Elem()
}

type faucetArgs struct {
	Connection   ssh.Connection `pulumi:"connection"`
	Flags        FaucetFlags    `pulumi:"flags"`
	Keypair      string         `pulumi:"keypair"`
	RunnerConfig *runner.Config `pulumi:"runnerConfig"`
	Triggers     []interface{}  `pulumi:"triggers"`
	Version      *string        `pulumi:"version"`
}

// The set of arguments for constructing a Faucet resource.
type FaucetArgs struct {
	Connection   ssh.ConnectionInput
	Flags        FaucetFlagsInput
	Keypair      pulumi.StringInput
	RunnerConfig runner.ConfigPtrInput
	Triggers     pulumi.ArrayInput
	Version      pulumi.StringPtrInput
}

func (FaucetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*faucetArgs)(nil)).Elem()
}

type FaucetInput interface {
	pulumi.Input

	ToFaucetOutput() FaucetOutput
	ToFaucetOutputWithContext(ctx context.Context) FaucetOutput
}

func (*Faucet) ElementType() reflect.Type {
	return reflect.TypeOf((**Faucet)(nil)).Elem()
}

func (i *Faucet) ToFaucetOutput() FaucetOutput {
	return i.ToFaucetOutputWithContext(context.Background())
}

func (i *Faucet) ToFaucetOutputWithContext(ctx context.Context) FaucetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaucetOutput)
}

type FaucetOutput struct{ *pulumi.OutputState }

func (FaucetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Faucet)(nil)).Elem()
}

func (o FaucetOutput) ToFaucetOutput() FaucetOutput {
	return o
}

func (o FaucetOutput) ToFaucetOutputWithContext(ctx context.Context) FaucetOutput {
	return o
}

func (o FaucetOutput) Connection() ssh.ConnectionOutput {
	return o.ApplyT(func(v *Faucet) ssh.ConnectionOutput { return v.Connection }).(ssh.ConnectionOutput)
}

func (o FaucetOutput) Flags() FaucetFlagsOutput {
	return o.ApplyT(func(v *Faucet) FaucetFlagsOutput { return v.Flags }).(FaucetFlagsOutput)
}

func (o FaucetOutput) Keypair() pulumi.StringOutput {
	return o.ApplyT(func(v *Faucet) pulumi.StringOutput { return v.Keypair }).(pulumi.StringOutput)
}

func (o FaucetOutput) RunnerConfig() runner.ConfigPtrOutput {
	return o.ApplyT(func(v *Faucet) runner.ConfigPtrOutput { return v.RunnerConfig }).(runner.ConfigPtrOutput)
}

func (o FaucetOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Faucet) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

func (o FaucetOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Faucet) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FaucetInput)(nil)).Elem(), &Faucet{})
	pulumi.RegisterOutputType(FaucetOutput{})
}
