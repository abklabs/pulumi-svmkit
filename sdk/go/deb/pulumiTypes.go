// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deb

import (
	"context"
	"reflect"

	"github.com/abklabs/pulumi-svmkit/sdk/go/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Package struct {
	Name          string  `pulumi:"name"`
	Path          *string `pulumi:"path"`
	TargetRelease *string `pulumi:"targetRelease"`
	Version       *string `pulumi:"version"`
}

// PackageInput is an input type that accepts PackageArgs and PackageOutput values.
// You can construct a concrete instance of `PackageInput` via:
//
//	PackageArgs{...}
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

type PackageArgs struct {
	Name          pulumi.StringInput    `pulumi:"name"`
	Path          pulumi.StringPtrInput `pulumi:"path"`
	TargetRelease pulumi.StringPtrInput `pulumi:"targetRelease"`
	Version       pulumi.StringPtrInput `pulumi:"version"`
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (i PackageArgs) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

// PackageArrayInput is an input type that accepts PackageArray and PackageArrayOutput values.
// You can construct a concrete instance of `PackageArrayInput` via:
//
//	PackageArray{ PackageArgs{...} }
type PackageArrayInput interface {
	pulumi.Input

	ToPackageArrayOutput() PackageArrayOutput
	ToPackageArrayOutputWithContext(context.Context) PackageArrayOutput
}

type PackageArray []PackageInput

func (PackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Package)(nil)).Elem()
}

func (i PackageArray) ToPackageArrayOutput() PackageArrayOutput {
	return i.ToPackageArrayOutputWithContext(context.Background())
}

func (i PackageArray) ToPackageArrayOutputWithContext(ctx context.Context) PackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageArrayOutput)
}

type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

func (o PackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Package) string { return v.Name }).(pulumi.StringOutput)
}

func (o PackageOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o PackageOutput) TargetRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.TargetRelease }).(pulumi.StringPtrOutput)
}

func (o PackageOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PackageArrayOutput struct{ *pulumi.OutputState }

func (PackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Package)(nil)).Elem()
}

func (o PackageArrayOutput) ToPackageArrayOutput() PackageArrayOutput {
	return o
}

func (o PackageArrayOutput) ToPackageArrayOutputWithContext(ctx context.Context) PackageArrayOutput {
	return o
}

func (o PackageArrayOutput) Index(i pulumi.IntInput) PackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Package {
		return vs[0].([]Package)[vs[1].(int)]
	}).(PackageOutput)
}

type PackageConfig struct {
	Additional []string  `pulumi:"additional"`
	Override   []Package `pulumi:"override"`
}

// PackageConfigInput is an input type that accepts PackageConfigArgs and PackageConfigOutput values.
// You can construct a concrete instance of `PackageConfigInput` via:
//
//	PackageConfigArgs{...}
type PackageConfigInput interface {
	pulumi.Input

	ToPackageConfigOutput() PackageConfigOutput
	ToPackageConfigOutputWithContext(context.Context) PackageConfigOutput
}

type PackageConfigArgs struct {
	Additional pulumi.StringArrayInput `pulumi:"additional"`
	Override   PackageArrayInput       `pulumi:"override"`
}

func (PackageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageConfig)(nil)).Elem()
}

func (i PackageConfigArgs) ToPackageConfigOutput() PackageConfigOutput {
	return i.ToPackageConfigOutputWithContext(context.Background())
}

func (i PackageConfigArgs) ToPackageConfigOutputWithContext(ctx context.Context) PackageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageConfigOutput)
}

func (i PackageConfigArgs) ToPackageConfigPtrOutput() PackageConfigPtrOutput {
	return i.ToPackageConfigPtrOutputWithContext(context.Background())
}

func (i PackageConfigArgs) ToPackageConfigPtrOutputWithContext(ctx context.Context) PackageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageConfigOutput).ToPackageConfigPtrOutputWithContext(ctx)
}

// PackageConfigPtrInput is an input type that accepts PackageConfigArgs, PackageConfigPtr and PackageConfigPtrOutput values.
// You can construct a concrete instance of `PackageConfigPtrInput` via:
//
//	        PackageConfigArgs{...}
//
//	or:
//
//	        nil
type PackageConfigPtrInput interface {
	pulumi.Input

	ToPackageConfigPtrOutput() PackageConfigPtrOutput
	ToPackageConfigPtrOutputWithContext(context.Context) PackageConfigPtrOutput
}

type packageConfigPtrType PackageConfigArgs

func PackageConfigPtr(v *PackageConfigArgs) PackageConfigPtrInput {
	return (*packageConfigPtrType)(v)
}

func (*packageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageConfig)(nil)).Elem()
}

func (i *packageConfigPtrType) ToPackageConfigPtrOutput() PackageConfigPtrOutput {
	return i.ToPackageConfigPtrOutputWithContext(context.Background())
}

func (i *packageConfigPtrType) ToPackageConfigPtrOutputWithContext(ctx context.Context) PackageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageConfigPtrOutput)
}

type PackageConfigOutput struct{ *pulumi.OutputState }

func (PackageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageConfig)(nil)).Elem()
}

func (o PackageConfigOutput) ToPackageConfigOutput() PackageConfigOutput {
	return o
}

func (o PackageConfigOutput) ToPackageConfigOutputWithContext(ctx context.Context) PackageConfigOutput {
	return o
}

func (o PackageConfigOutput) ToPackageConfigPtrOutput() PackageConfigPtrOutput {
	return o.ToPackageConfigPtrOutputWithContext(context.Background())
}

func (o PackageConfigOutput) ToPackageConfigPtrOutputWithContext(ctx context.Context) PackageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageConfig) *PackageConfig {
		return &v
	}).(PackageConfigPtrOutput)
}

func (o PackageConfigOutput) Additional() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PackageConfig) []string { return v.Additional }).(pulumi.StringArrayOutput)
}

func (o PackageConfigOutput) Override() PackageArrayOutput {
	return o.ApplyT(func(v PackageConfig) []Package { return v.Override }).(PackageArrayOutput)
}

type PackageConfigPtrOutput struct{ *pulumi.OutputState }

func (PackageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageConfig)(nil)).Elem()
}

func (o PackageConfigPtrOutput) ToPackageConfigPtrOutput() PackageConfigPtrOutput {
	return o
}

func (o PackageConfigPtrOutput) ToPackageConfigPtrOutputWithContext(ctx context.Context) PackageConfigPtrOutput {
	return o
}

func (o PackageConfigPtrOutput) Elem() PackageConfigOutput {
	return o.ApplyT(func(v *PackageConfig) PackageConfig {
		if v != nil {
			return *v
		}
		var ret PackageConfig
		return ret
	}).(PackageConfigOutput)
}

func (o PackageConfigPtrOutput) Additional() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PackageConfig) []string {
		if v == nil {
			return nil
		}
		return v.Additional
	}).(pulumi.StringArrayOutput)
}

func (o PackageConfigPtrOutput) Override() PackageArrayOutput {
	return o.ApplyT(func(v *PackageConfig) []Package {
		if v == nil {
			return nil
		}
		return v.Override
	}).(PackageArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInput)(nil)).Elem(), PackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageArrayInput)(nil)).Elem(), PackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageConfigInput)(nil)).Elem(), PackageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageConfigPtrInput)(nil)).Elem(), PackageConfigArgs{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackageArrayOutput{})
	pulumi.RegisterOutputType(PackageConfigOutput{})
	pulumi.RegisterOutputType(PackageConfigPtrOutput{})
}
