// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package validator

import (
	"context"
	"reflect"

	"errors"
	"github.com/abklabs/pulumi-svmkit/sdk/go/deletion"
	"github.com/abklabs/pulumi-svmkit/sdk/go/firedancer"
	"github.com/abklabs/pulumi-svmkit/sdk/go/internal"
	"github.com/abklabs/pulumi-svmkit/sdk/go/runner"
	"github.com/abklabs/pulumi-svmkit/sdk/go/solana"
	"github.com/abklabs/pulumi-svmkit/sdk/go/ssh"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Firedancer struct {
	pulumi.CustomResourceState

	Config             firedancer.ConfigOutput     `pulumi:"config"`
	Connection         ssh.ConnectionOutput        `pulumi:"connection"`
	DeletionPolicy     deletion.PolicyPtrOutput    `pulumi:"deletionPolicy"`
	Environment        solana.EnvironmentPtrOutput `pulumi:"environment"`
	KeyPairs           firedancer.KeyPairsOutput   `pulumi:"keyPairs"`
	RunnerConfig       runner.ConfigPtrOutput      `pulumi:"runnerConfig"`
	SystemdServiceName pulumi.StringOutput         `pulumi:"systemdServiceName"`
	Triggers           pulumi.ArrayOutput          `pulumi:"triggers"`
	Variant            firedancer.VariantPtrOutput `pulumi:"variant"`
	Version            pulumi.StringPtrOutput      `pulumi:"version"`
}

// NewFiredancer registers a new resource with the given unique name, arguments, and options.
func NewFiredancer(ctx *pulumi.Context,
	name string, args *FiredancerArgs, opts ...pulumi.ResourceOption) (*Firedancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.KeyPairs == nil {
		return nil, errors.New("invalid value for required argument 'KeyPairs'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v ssh.Connection) ssh.Connection { return *v.Defaults() }).(ssh.ConnectionOutput)
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"triggers[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Firedancer
	err := ctx.RegisterResource("svmkit:validator:Firedancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFiredancer gets an existing Firedancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFiredancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FiredancerState, opts ...pulumi.ResourceOption) (*Firedancer, error) {
	var resource Firedancer
	err := ctx.ReadResource("svmkit:validator:Firedancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Firedancer resources.
type firedancerState struct {
}

type FiredancerState struct {
}

func (FiredancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*firedancerState)(nil)).Elem()
}

type firedancerArgs struct {
	Config         firedancer.Config   `pulumi:"config"`
	Connection     ssh.Connection      `pulumi:"connection"`
	DeletionPolicy *deletion.Policy    `pulumi:"deletionPolicy"`
	Environment    *solana.Environment `pulumi:"environment"`
	KeyPairs       firedancer.KeyPairs `pulumi:"keyPairs"`
	RunnerConfig   *runner.Config      `pulumi:"runnerConfig"`
	Triggers       []interface{}       `pulumi:"triggers"`
	Variant        *firedancer.Variant `pulumi:"variant"`
	Version        *string             `pulumi:"version"`
}

// The set of arguments for constructing a Firedancer resource.
type FiredancerArgs struct {
	Config         firedancer.ConfigInput
	Connection     ssh.ConnectionInput
	DeletionPolicy deletion.PolicyPtrInput
	Environment    solana.EnvironmentPtrInput
	KeyPairs       firedancer.KeyPairsInput
	RunnerConfig   runner.ConfigPtrInput
	Triggers       pulumi.ArrayInput
	Variant        firedancer.VariantPtrInput
	Version        pulumi.StringPtrInput
}

func (FiredancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firedancerArgs)(nil)).Elem()
}

type FiredancerInput interface {
	pulumi.Input

	ToFiredancerOutput() FiredancerOutput
	ToFiredancerOutputWithContext(ctx context.Context) FiredancerOutput
}

func (*Firedancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Firedancer)(nil)).Elem()
}

func (i *Firedancer) ToFiredancerOutput() FiredancerOutput {
	return i.ToFiredancerOutputWithContext(context.Background())
}

func (i *Firedancer) ToFiredancerOutputWithContext(ctx context.Context) FiredancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiredancerOutput)
}

type FiredancerOutput struct{ *pulumi.OutputState }

func (FiredancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Firedancer)(nil)).Elem()
}

func (o FiredancerOutput) ToFiredancerOutput() FiredancerOutput {
	return o
}

func (o FiredancerOutput) ToFiredancerOutputWithContext(ctx context.Context) FiredancerOutput {
	return o
}

func (o FiredancerOutput) Config() firedancer.ConfigOutput {
	return o.ApplyT(func(v *Firedancer) firedancer.ConfigOutput { return v.Config }).(firedancer.ConfigOutput)
}

func (o FiredancerOutput) Connection() ssh.ConnectionOutput {
	return o.ApplyT(func(v *Firedancer) ssh.ConnectionOutput { return v.Connection }).(ssh.ConnectionOutput)
}

func (o FiredancerOutput) DeletionPolicy() deletion.PolicyPtrOutput {
	return o.ApplyT(func(v *Firedancer) deletion.PolicyPtrOutput { return v.DeletionPolicy }).(deletion.PolicyPtrOutput)
}

func (o FiredancerOutput) Environment() solana.EnvironmentPtrOutput {
	return o.ApplyT(func(v *Firedancer) solana.EnvironmentPtrOutput { return v.Environment }).(solana.EnvironmentPtrOutput)
}

func (o FiredancerOutput) KeyPairs() firedancer.KeyPairsOutput {
	return o.ApplyT(func(v *Firedancer) firedancer.KeyPairsOutput { return v.KeyPairs }).(firedancer.KeyPairsOutput)
}

func (o FiredancerOutput) RunnerConfig() runner.ConfigPtrOutput {
	return o.ApplyT(func(v *Firedancer) runner.ConfigPtrOutput { return v.RunnerConfig }).(runner.ConfigPtrOutput)
}

func (o FiredancerOutput) SystemdServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Firedancer) pulumi.StringOutput { return v.SystemdServiceName }).(pulumi.StringOutput)
}

func (o FiredancerOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Firedancer) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

func (o FiredancerOutput) Variant() firedancer.VariantPtrOutput {
	return o.ApplyT(func(v *Firedancer) firedancer.VariantPtrOutput { return v.Variant }).(firedancer.VariantPtrOutput)
}

func (o FiredancerOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Firedancer) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FiredancerInput)(nil)).Elem(), &Firedancer{})
	pulumi.RegisterOutputType(FiredancerOutput{})
}
