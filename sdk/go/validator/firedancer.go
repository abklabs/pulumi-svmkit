// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package validator

import (
	"context"
	"reflect"

	"errors"
	"github.com/abklabs/pulumi-svmkit/sdk/go/firedancer"
	"github.com/abklabs/pulumi-svmkit/sdk/go/internal"
	"github.com/abklabs/pulumi-svmkit/sdk/go/ssh"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Firedancer struct {
	pulumi.CustomResourceState

	Config     firedancer.ConfigOutput   `pulumi:"config"`
	Connection ssh.ConnectionOutput      `pulumi:"connection"`
	KeyPairs   firedancer.KeyPairsOutput `pulumi:"keyPairs"`
}

// NewFiredancer registers a new resource with the given unique name, arguments, and options.
func NewFiredancer(ctx *pulumi.Context,
	name string, args *FiredancerArgs, opts ...pulumi.ResourceOption) (*Firedancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.KeyPairs == nil {
		return nil, errors.New("invalid value for required argument 'KeyPairs'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v ssh.Connection) ssh.Connection { return *v.Defaults() }).(ssh.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Firedancer
	err := ctx.RegisterResource("svmkit:validator:Firedancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFiredancer gets an existing Firedancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFiredancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FiredancerState, opts ...pulumi.ResourceOption) (*Firedancer, error) {
	var resource Firedancer
	err := ctx.ReadResource("svmkit:validator:Firedancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Firedancer resources.
type firedancerState struct {
}

type FiredancerState struct {
}

func (FiredancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*firedancerState)(nil)).Elem()
}

type firedancerArgs struct {
	Config     firedancer.Config   `pulumi:"config"`
	Connection ssh.Connection      `pulumi:"connection"`
	KeyPairs   firedancer.KeyPairs `pulumi:"keyPairs"`
}

// The set of arguments for constructing a Firedancer resource.
type FiredancerArgs struct {
	Config     firedancer.ConfigInput
	Connection ssh.ConnectionInput
	KeyPairs   firedancer.KeyPairsInput
}

func (FiredancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firedancerArgs)(nil)).Elem()
}

type FiredancerInput interface {
	pulumi.Input

	ToFiredancerOutput() FiredancerOutput
	ToFiredancerOutputWithContext(ctx context.Context) FiredancerOutput
}

func (*Firedancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Firedancer)(nil)).Elem()
}

func (i *Firedancer) ToFiredancerOutput() FiredancerOutput {
	return i.ToFiredancerOutputWithContext(context.Background())
}

func (i *Firedancer) ToFiredancerOutputWithContext(ctx context.Context) FiredancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiredancerOutput)
}

type FiredancerOutput struct{ *pulumi.OutputState }

func (FiredancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Firedancer)(nil)).Elem()
}

func (o FiredancerOutput) ToFiredancerOutput() FiredancerOutput {
	return o
}

func (o FiredancerOutput) ToFiredancerOutputWithContext(ctx context.Context) FiredancerOutput {
	return o
}

func (o FiredancerOutput) Config() firedancer.ConfigOutput {
	return o.ApplyT(func(v *Firedancer) firedancer.ConfigOutput { return v.Config }).(firedancer.ConfigOutput)
}

func (o FiredancerOutput) Connection() ssh.ConnectionOutput {
	return o.ApplyT(func(v *Firedancer) ssh.ConnectionOutput { return v.Connection }).(ssh.ConnectionOutput)
}

func (o FiredancerOutput) KeyPairs() firedancer.KeyPairsOutput {
	return o.ApplyT(func(v *Firedancer) firedancer.KeyPairsOutput { return v.KeyPairs }).(firedancer.KeyPairsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FiredancerInput)(nil)).Elem(), &Firedancer{})
	pulumi.RegisterOutputType(FiredancerOutput{})
}
