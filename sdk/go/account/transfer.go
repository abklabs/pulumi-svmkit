// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package account

import (
	"context"
	"reflect"

	"errors"
	"github.com/abklabs/pulumi-svmkit/sdk/go/internal"
	"github.com/abklabs/pulumi-svmkit/sdk/go/solana"
	"github.com/abklabs/pulumi-svmkit/sdk/go/ssh"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Transfer struct {
	pulumi.CustomResourceState

	AllowUnfundedRecipient pulumi.BoolPtrOutput    `pulumi:"allowUnfundedRecipient"`
	Amount                 pulumi.Float64Output    `pulumi:"amount"`
	Connection             ssh.ConnectionOutput    `pulumi:"connection"`
	RecipientPubkey        pulumi.StringOutput     `pulumi:"recipientPubkey"`
	TransactionOptions     solana.TxnOptionsOutput `pulumi:"transactionOptions"`
}

// NewTransfer registers a new resource with the given unique name, arguments, and options.
func NewTransfer(ctx *pulumi.Context,
	name string, args *TransferArgs, opts ...pulumi.ResourceOption) (*Transfer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Amount == nil {
		return nil, errors.New("invalid value for required argument 'Amount'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.RecipientPubkey == nil {
		return nil, errors.New("invalid value for required argument 'RecipientPubkey'")
	}
	if args.TransactionOptions == nil {
		return nil, errors.New("invalid value for required argument 'TransactionOptions'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v ssh.Connection) ssh.Connection { return *v.Defaults() }).(ssh.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Transfer
	err := ctx.RegisterResource("svmkit:account:Transfer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransfer gets an existing Transfer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransfer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransferState, opts ...pulumi.ResourceOption) (*Transfer, error) {
	var resource Transfer
	err := ctx.ReadResource("svmkit:account:Transfer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transfer resources.
type transferState struct {
}

type TransferState struct {
}

func (TransferState) ElementType() reflect.Type {
	return reflect.TypeOf((*transferState)(nil)).Elem()
}

type transferArgs struct {
	AllowUnfundedRecipient *bool             `pulumi:"allowUnfundedRecipient"`
	Amount                 float64           `pulumi:"amount"`
	Connection             ssh.Connection    `pulumi:"connection"`
	RecipientPubkey        string            `pulumi:"recipientPubkey"`
	TransactionOptions     solana.TxnOptions `pulumi:"transactionOptions"`
}

// The set of arguments for constructing a Transfer resource.
type TransferArgs struct {
	AllowUnfundedRecipient pulumi.BoolPtrInput
	Amount                 pulumi.Float64Input
	Connection             ssh.ConnectionInput
	RecipientPubkey        pulumi.StringInput
	TransactionOptions     solana.TxnOptionsInput
}

func (TransferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transferArgs)(nil)).Elem()
}

type TransferInput interface {
	pulumi.Input

	ToTransferOutput() TransferOutput
	ToTransferOutputWithContext(ctx context.Context) TransferOutput
}

func (*Transfer) ElementType() reflect.Type {
	return reflect.TypeOf((**Transfer)(nil)).Elem()
}

func (i *Transfer) ToTransferOutput() TransferOutput {
	return i.ToTransferOutputWithContext(context.Background())
}

func (i *Transfer) ToTransferOutputWithContext(ctx context.Context) TransferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransferOutput)
}

type TransferOutput struct{ *pulumi.OutputState }

func (TransferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transfer)(nil)).Elem()
}

func (o TransferOutput) ToTransferOutput() TransferOutput {
	return o
}

func (o TransferOutput) ToTransferOutputWithContext(ctx context.Context) TransferOutput {
	return o
}

func (o TransferOutput) AllowUnfundedRecipient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Transfer) pulumi.BoolPtrOutput { return v.AllowUnfundedRecipient }).(pulumi.BoolPtrOutput)
}

func (o TransferOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v *Transfer) pulumi.Float64Output { return v.Amount }).(pulumi.Float64Output)
}

func (o TransferOutput) Connection() ssh.ConnectionOutput {
	return o.ApplyT(func(v *Transfer) ssh.ConnectionOutput { return v.Connection }).(ssh.ConnectionOutput)
}

func (o TransferOutput) RecipientPubkey() pulumi.StringOutput {
	return o.ApplyT(func(v *Transfer) pulumi.StringOutput { return v.RecipientPubkey }).(pulumi.StringOutput)
}

func (o TransferOutput) TransactionOptions() solana.TxnOptionsOutput {
	return o.ApplyT(func(v *Transfer) solana.TxnOptionsOutput { return v.TransactionOptions }).(solana.TxnOptionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransferInput)(nil)).Elem(), &Transfer{})
	pulumi.RegisterOutputType(TransferOutput{})
}
