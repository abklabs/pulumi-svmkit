// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package account

import (
	"context"
	"reflect"

	"errors"
	"github.com/abklabs/pulumi-svmkit/sdk/go/internal"
	"github.com/abklabs/pulumi-svmkit/sdk/go/solana"
	"github.com/abklabs/pulumi-svmkit/sdk/go/ssh"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StakeAccount struct {
	pulumi.CustomResourceState

	Amount             pulumi.Float64Output               `pulumi:"amount"`
	Connection         ssh.ConnectionOutput               `pulumi:"connection"`
	ForceDelete        pulumi.BoolOutput                  `pulumi:"forceDelete"`
	KeyPairs           solana.StakeAccountKeyPairsOutput  `pulumi:"keyPairs"`
	LockupArgs         solana.StakeAccountLockupPtrOutput `pulumi:"lockupArgs"`
	TransactionOptions solana.TxnOptionsOutput            `pulumi:"transactionOptions"`
	VoteAddress        pulumi.StringPtrOutput             `pulumi:"voteAddress"`
	WithdrawAddress    pulumi.StringPtrOutput             `pulumi:"withdrawAddress"`
}

// NewStakeAccount registers a new resource with the given unique name, arguments, and options.
func NewStakeAccount(ctx *pulumi.Context,
	name string, args *StakeAccountArgs, opts ...pulumi.ResourceOption) (*StakeAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Amount == nil {
		return nil, errors.New("invalid value for required argument 'Amount'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.ForceDelete == nil {
		return nil, errors.New("invalid value for required argument 'ForceDelete'")
	}
	if args.KeyPairs == nil {
		return nil, errors.New("invalid value for required argument 'KeyPairs'")
	}
	if args.TransactionOptions == nil {
		return nil, errors.New("invalid value for required argument 'TransactionOptions'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v ssh.Connection) ssh.Connection { return *v.Defaults() }).(ssh.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StakeAccount
	err := ctx.RegisterResource("svmkit:account:StakeAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStakeAccount gets an existing StakeAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStakeAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StakeAccountState, opts ...pulumi.ResourceOption) (*StakeAccount, error) {
	var resource StakeAccount
	err := ctx.ReadResource("svmkit:account:StakeAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StakeAccount resources.
type stakeAccountState struct {
}

type StakeAccountState struct {
}

func (StakeAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*stakeAccountState)(nil)).Elem()
}

type stakeAccountArgs struct {
	Amount             float64                     `pulumi:"amount"`
	Connection         ssh.Connection              `pulumi:"connection"`
	ForceDelete        bool                        `pulumi:"forceDelete"`
	KeyPairs           solana.StakeAccountKeyPairs `pulumi:"keyPairs"`
	LockupArgs         *solana.StakeAccountLockup  `pulumi:"lockupArgs"`
	TransactionOptions solana.TxnOptions           `pulumi:"transactionOptions"`
	VoteAddress        *string                     `pulumi:"voteAddress"`
	WithdrawAddress    *string                     `pulumi:"withdrawAddress"`
}

// The set of arguments for constructing a StakeAccount resource.
type StakeAccountArgs struct {
	Amount             pulumi.Float64Input
	Connection         ssh.ConnectionInput
	ForceDelete        pulumi.BoolInput
	KeyPairs           solana.StakeAccountKeyPairsInput
	LockupArgs         solana.StakeAccountLockupPtrInput
	TransactionOptions solana.TxnOptionsInput
	VoteAddress        pulumi.StringPtrInput
	WithdrawAddress    pulumi.StringPtrInput
}

func (StakeAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stakeAccountArgs)(nil)).Elem()
}

type StakeAccountInput interface {
	pulumi.Input

	ToStakeAccountOutput() StakeAccountOutput
	ToStakeAccountOutputWithContext(ctx context.Context) StakeAccountOutput
}

func (*StakeAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**StakeAccount)(nil)).Elem()
}

func (i *StakeAccount) ToStakeAccountOutput() StakeAccountOutput {
	return i.ToStakeAccountOutputWithContext(context.Background())
}

func (i *StakeAccount) ToStakeAccountOutputWithContext(ctx context.Context) StakeAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StakeAccountOutput)
}

type StakeAccountOutput struct{ *pulumi.OutputState }

func (StakeAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StakeAccount)(nil)).Elem()
}

func (o StakeAccountOutput) ToStakeAccountOutput() StakeAccountOutput {
	return o
}

func (o StakeAccountOutput) ToStakeAccountOutputWithContext(ctx context.Context) StakeAccountOutput {
	return o
}

func (o StakeAccountOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v *StakeAccount) pulumi.Float64Output { return v.Amount }).(pulumi.Float64Output)
}

func (o StakeAccountOutput) Connection() ssh.ConnectionOutput {
	return o.ApplyT(func(v *StakeAccount) ssh.ConnectionOutput { return v.Connection }).(ssh.ConnectionOutput)
}

func (o StakeAccountOutput) ForceDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *StakeAccount) pulumi.BoolOutput { return v.ForceDelete }).(pulumi.BoolOutput)
}

func (o StakeAccountOutput) KeyPairs() solana.StakeAccountKeyPairsOutput {
	return o.ApplyT(func(v *StakeAccount) solana.StakeAccountKeyPairsOutput { return v.KeyPairs }).(solana.StakeAccountKeyPairsOutput)
}

func (o StakeAccountOutput) LockupArgs() solana.StakeAccountLockupPtrOutput {
	return o.ApplyT(func(v *StakeAccount) solana.StakeAccountLockupPtrOutput { return v.LockupArgs }).(solana.StakeAccountLockupPtrOutput)
}

func (o StakeAccountOutput) TransactionOptions() solana.TxnOptionsOutput {
	return o.ApplyT(func(v *StakeAccount) solana.TxnOptionsOutput { return v.TransactionOptions }).(solana.TxnOptionsOutput)
}

func (o StakeAccountOutput) VoteAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StakeAccount) pulumi.StringPtrOutput { return v.VoteAddress }).(pulumi.StringPtrOutput)
}

func (o StakeAccountOutput) WithdrawAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StakeAccount) pulumi.StringPtrOutput { return v.WithdrawAddress }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StakeAccountInput)(nil)).Elem(), &StakeAccount{})
	pulumi.RegisterOutputType(StakeAccountOutput{})
}
