// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace ABKLabs.Svmkit.Tuner
{
    [EnumType]
    public readonly struct CpuGovernor : IEquatable<CpuGovernor>
    {
        private readonly string _value;

        private CpuGovernor(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The performance governor
        /// </summary>
        public static CpuGovernor Performance { get; } = new CpuGovernor("performance");
        /// <summary>
        /// The powersave governor
        /// </summary>
        public static CpuGovernor Powersave { get; } = new CpuGovernor("powersave");
        /// <summary>
        /// The ondemand governor
        /// </summary>
        public static CpuGovernor Ondemand { get; } = new CpuGovernor("ondemand");
        /// <summary>
        /// The conservative governor
        /// </summary>
        public static CpuGovernor Conservative { get; } = new CpuGovernor("conservative");
        /// <summary>
        /// The schedutil governor
        /// </summary>
        public static CpuGovernor Schedutil { get; } = new CpuGovernor("schedutil");
        /// <summary>
        /// The userspace governor
        /// </summary>
        public static CpuGovernor Userspace { get; } = new CpuGovernor("userspace");

        public static bool operator ==(CpuGovernor left, CpuGovernor right) => left.Equals(right);
        public static bool operator !=(CpuGovernor left, CpuGovernor right) => !left.Equals(right);

        public static explicit operator string(CpuGovernor value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CpuGovernor other && Equals(other);
        public bool Equals(CpuGovernor other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TunerVariant : IEquatable<TunerVariant>
    {
        private readonly string _value;

        private TunerVariant(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The generic tuner
        /// </summary>
        public static TunerVariant Generic { get; } = new TunerVariant("generic");

        public static bool operator ==(TunerVariant left, TunerVariant right) => left.Equals(right);
        public static bool operator !=(TunerVariant left, TunerVariant right) => !left.Equals(right);

        public static explicit operator string(TunerVariant value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TunerVariant other && Equals(other);
        public bool Equals(TunerVariant other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
