// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ABKLabs.Svmkit.Genesis.Outputs
{

    [OutputType]
    public sealed class GenesisFlags
    {
        public readonly string? BootstrapStakeAuthorizedPubkey;
        public readonly int? BootstrapValidatorLamports;
        public readonly int? BootstrapValidatorStakeLamports;
        public readonly ImmutableArray<Outputs.BootstrapValidator> BootstrapValidators;
        public readonly string? ClusterType;
        public readonly string? CreationTime;
        public readonly ImmutableArray<string> DeactivateFeatures;
        public readonly bool? EnableWarmupEpochs;
        public readonly ImmutableArray<string> ExtraFlags;
        public readonly int? FaucetLamports;
        public readonly string? FaucetPubkey;
        public readonly int? FeeBurnPercentage;
        public readonly string? HashesPerTick;
        public readonly string? Inflation;
        public readonly int? LamportsPerByteYear;
        public readonly string LedgerPath;
        public readonly int? MaxGenesisArchiveUnpackedSize;
        public readonly int? RentBurnPercentage;
        public readonly int? RentExemptionThreshold;
        public readonly int? SlotsPerEpoch;
        public readonly int? TargetLamportsPerSignature;
        public readonly int? TargetSignaturesPerSlot;
        public readonly int? TargetTickDuration;
        public readonly int? TicksPerSlot;
        public readonly string? Url;
        public readonly int? VoteCommissionPercentage;

        [OutputConstructor]
        private GenesisFlags(
            string? bootstrapStakeAuthorizedPubkey,

            int? bootstrapValidatorLamports,

            int? bootstrapValidatorStakeLamports,

            ImmutableArray<Outputs.BootstrapValidator> bootstrapValidators,

            string? clusterType,

            string? creationTime,

            ImmutableArray<string> deactivateFeatures,

            bool? enableWarmupEpochs,

            ImmutableArray<string> extraFlags,

            int? faucetLamports,

            string? faucetPubkey,

            int? feeBurnPercentage,

            string? hashesPerTick,

            string? inflation,

            int? lamportsPerByteYear,

            string ledgerPath,

            int? maxGenesisArchiveUnpackedSize,

            int? rentBurnPercentage,

            int? rentExemptionThreshold,

            int? slotsPerEpoch,

            int? targetLamportsPerSignature,

            int? targetSignaturesPerSlot,

            int? targetTickDuration,

            int? ticksPerSlot,

            string? url,

            int? voteCommissionPercentage)
        {
            BootstrapStakeAuthorizedPubkey = bootstrapStakeAuthorizedPubkey;
            BootstrapValidatorLamports = bootstrapValidatorLamports;
            BootstrapValidatorStakeLamports = bootstrapValidatorStakeLamports;
            BootstrapValidators = bootstrapValidators;
            ClusterType = clusterType;
            CreationTime = creationTime;
            DeactivateFeatures = deactivateFeatures;
            EnableWarmupEpochs = enableWarmupEpochs;
            ExtraFlags = extraFlags;
            FaucetLamports = faucetLamports;
            FaucetPubkey = faucetPubkey;
            FeeBurnPercentage = feeBurnPercentage;
            HashesPerTick = hashesPerTick;
            Inflation = inflation;
            LamportsPerByteYear = lamportsPerByteYear;
            LedgerPath = ledgerPath;
            MaxGenesisArchiveUnpackedSize = maxGenesisArchiveUnpackedSize;
            RentBurnPercentage = rentBurnPercentage;
            RentExemptionThreshold = rentExemptionThreshold;
            SlotsPerEpoch = slotsPerEpoch;
            TargetLamportsPerSignature = targetLamportsPerSignature;
            TargetSignaturesPerSlot = targetSignaturesPerSlot;
            TargetTickDuration = targetTickDuration;
            TicksPerSlot = ticksPerSlot;
            Url = url;
            VoteCommissionPercentage = voteCommissionPercentage;
        }
    }
}
