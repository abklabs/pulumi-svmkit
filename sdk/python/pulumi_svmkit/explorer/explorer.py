# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import deb as _deb
from .. import runner as _runner
from .. import solana as _solana
from .. import ssh as _ssh
from ._inputs import *

__all__ = ['ExplorerArgs', 'Explorer']

@pulumi.input_type
class ExplorerArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['_ssh.ConnectionArgs'],
                 environment: pulumi.Input['_solana.EnvironmentArgs'],
                 flags: pulumi.Input['ExplorerFlagsArgs'],
                 rpcurl: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 runner_config: Optional[pulumi.Input['_runner.ConfigArgs']] = None,
                 symbol: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Explorer resource.
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "flags", flags)
        if rpcurl is not None:
            pulumi.set(__self__, "rpcurl", rpcurl)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runner_config is not None:
            pulumi.set(__self__, "runner_config", runner_config)
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['_ssh.ConnectionArgs']:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['_ssh.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input['_solana.EnvironmentArgs']:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input['_solana.EnvironmentArgs']):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def flags(self) -> pulumi.Input['ExplorerFlagsArgs']:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: pulumi.Input['ExplorerFlagsArgs']):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter(name="RPCURL")
    def rpcurl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpcurl")

    @rpcurl.setter
    def rpcurl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpcurl", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="runnerConfig")
    def runner_config(self) -> Optional[pulumi.Input['_runner.ConfigArgs']]:
        return pulumi.get(self, "runner_config")

    @runner_config.setter
    def runner_config(self, value: Optional[pulumi.Input['_runner.ConfigArgs']]):
        pulumi.set(self, "runner_config", value)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symbol", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Explorer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rpcurl: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[Union['_ssh.ConnectionArgs', '_ssh.ConnectionArgsDict']]] = None,
                 environment: Optional[pulumi.Input[Union['_solana.EnvironmentArgs', '_solana.EnvironmentArgsDict']]] = None,
                 flags: Optional[pulumi.Input[Union['ExplorerFlagsArgs', 'ExplorerFlagsArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 runner_config: Optional[pulumi.Input[Union['_runner.ConfigArgs', '_runner.ConfigArgsDict']]] = None,
                 symbol: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Explorer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExplorerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Explorer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExplorerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExplorerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rpcurl: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[Union['_ssh.ConnectionArgs', '_ssh.ConnectionArgsDict']]] = None,
                 environment: Optional[pulumi.Input[Union['_solana.EnvironmentArgs', '_solana.EnvironmentArgsDict']]] = None,
                 flags: Optional[pulumi.Input[Union['ExplorerFlagsArgs', 'ExplorerFlagsArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 runner_config: Optional[pulumi.Input[Union['_runner.ConfigArgs', '_runner.ConfigArgsDict']]] = None,
                 symbol: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExplorerArgs.__new__(ExplorerArgs)

            __props__.__dict__["rpcurl"] = rpcurl
            __props__.__dict__["cluster_name"] = cluster_name
            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            if flags is None and not opts.urn:
                raise TypeError("Missing required property 'flags'")
            __props__.__dict__["flags"] = flags
            __props__.__dict__["name"] = name
            __props__.__dict__["runner_config"] = runner_config
            __props__.__dict__["symbol"] = symbol
            __props__.__dict__["version"] = version
        super(Explorer, __self__).__init__(
            'svmkit:explorer:Explorer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Explorer':
        """
        Get an existing Explorer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ExplorerArgs.__new__(ExplorerArgs)

        __props__.__dict__["rpcurl"] = None
        __props__.__dict__["cluster_name"] = None
        __props__.__dict__["connection"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["flags"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["runner_config"] = None
        __props__.__dict__["symbol"] = None
        __props__.__dict__["version"] = None
        return Explorer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="RPCURL")
    def rpcurl(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "rpcurl")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['_ssh.outputs.Connection']:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output['_solana.outputs.Environment']:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def flags(self) -> pulumi.Output['outputs.ExplorerFlags']:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runnerConfig")
    def runner_config(self) -> pulumi.Output[Optional['_runner.outputs.Config']]:
        return pulumi.get(self, "runner_config")

    @property
    @pulumi.getter
    def symbol(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "symbol")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "version")

