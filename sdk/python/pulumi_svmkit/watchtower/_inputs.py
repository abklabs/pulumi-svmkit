# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DiscordConfigArgs',
    'DiscordConfigArgsDict',
    'NotificationConfigArgs',
    'NotificationConfigArgsDict',
    'PagerDutyConfigArgs',
    'PagerDutyConfigArgsDict',
    'SlackConfigArgs',
    'SlackConfigArgsDict',
    'TelegramConfigArgs',
    'TelegramConfigArgsDict',
    'TwilioConfigArgs',
    'TwilioConfigArgsDict',
    'WatchtowerFlagsArgs',
    'WatchtowerFlagsArgsDict',
]

MYPY = False

if not MYPY:
    class DiscordConfigArgsDict(TypedDict):
        webhook_url: pulumi.Input[str]
elif False:
    DiscordConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DiscordConfigArgs:
    def __init__(__self__, *,
                 webhook_url: pulumi.Input[str]):
        pulumi.set(__self__, "webhook_url", webhook_url)

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "webhook_url")

    @webhook_url.setter
    def webhook_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "webhook_url", value)


if not MYPY:
    class NotificationConfigArgsDict(TypedDict):
        discord: NotRequired[pulumi.Input['DiscordConfigArgsDict']]
        pager_duty: NotRequired[pulumi.Input['PagerDutyConfigArgsDict']]
        slack: NotRequired[pulumi.Input['SlackConfigArgsDict']]
        telegram: NotRequired[pulumi.Input['TelegramConfigArgsDict']]
        twilio: NotRequired[pulumi.Input['TwilioConfigArgsDict']]
elif False:
    NotificationConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationConfigArgs:
    def __init__(__self__, *,
                 discord: Optional[pulumi.Input['DiscordConfigArgs']] = None,
                 pager_duty: Optional[pulumi.Input['PagerDutyConfigArgs']] = None,
                 slack: Optional[pulumi.Input['SlackConfigArgs']] = None,
                 telegram: Optional[pulumi.Input['TelegramConfigArgs']] = None,
                 twilio: Optional[pulumi.Input['TwilioConfigArgs']] = None):
        if discord is not None:
            pulumi.set(__self__, "discord", discord)
        if pager_duty is not None:
            pulumi.set(__self__, "pager_duty", pager_duty)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if telegram is not None:
            pulumi.set(__self__, "telegram", telegram)
        if twilio is not None:
            pulumi.set(__self__, "twilio", twilio)

    @property
    @pulumi.getter
    def discord(self) -> Optional[pulumi.Input['DiscordConfigArgs']]:
        return pulumi.get(self, "discord")

    @discord.setter
    def discord(self, value: Optional[pulumi.Input['DiscordConfigArgs']]):
        pulumi.set(self, "discord", value)

    @property
    @pulumi.getter(name="pagerDuty")
    def pager_duty(self) -> Optional[pulumi.Input['PagerDutyConfigArgs']]:
        return pulumi.get(self, "pager_duty")

    @pager_duty.setter
    def pager_duty(self, value: Optional[pulumi.Input['PagerDutyConfigArgs']]):
        pulumi.set(self, "pager_duty", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['SlackConfigArgs']]:
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['SlackConfigArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def telegram(self) -> Optional[pulumi.Input['TelegramConfigArgs']]:
        return pulumi.get(self, "telegram")

    @telegram.setter
    def telegram(self, value: Optional[pulumi.Input['TelegramConfigArgs']]):
        pulumi.set(self, "telegram", value)

    @property
    @pulumi.getter
    def twilio(self) -> Optional[pulumi.Input['TwilioConfigArgs']]:
        return pulumi.get(self, "twilio")

    @twilio.setter
    def twilio(self, value: Optional[pulumi.Input['TwilioConfigArgs']]):
        pulumi.set(self, "twilio", value)


if not MYPY:
    class PagerDutyConfigArgsDict(TypedDict):
        integration_key: pulumi.Input[str]
elif False:
    PagerDutyConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PagerDutyConfigArgs:
    def __init__(__self__, *,
                 integration_key: pulumi.Input[str]):
        pulumi.set(__self__, "integration_key", integration_key)

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_key")

    @integration_key.setter
    def integration_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_key", value)


if not MYPY:
    class SlackConfigArgsDict(TypedDict):
        webhook_url: pulumi.Input[str]
elif False:
    SlackConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SlackConfigArgs:
    def __init__(__self__, *,
                 webhook_url: pulumi.Input[str]):
        pulumi.set(__self__, "webhook_url", webhook_url)

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "webhook_url")

    @webhook_url.setter
    def webhook_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "webhook_url", value)


if not MYPY:
    class TelegramConfigArgsDict(TypedDict):
        bot_token: pulumi.Input[str]
        chat_id: pulumi.Input[str]
elif False:
    TelegramConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelegramConfigArgs:
    def __init__(__self__, *,
                 bot_token: pulumi.Input[str],
                 chat_id: pulumi.Input[str]):
        pulumi.set(__self__, "bot_token", bot_token)
        pulumi.set(__self__, "chat_id", chat_id)

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bot_token")

    @bot_token.setter
    def bot_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "bot_token", value)

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "chat_id")

    @chat_id.setter
    def chat_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "chat_id", value)


if not MYPY:
    class TwilioConfigArgsDict(TypedDict):
        account_sid: pulumi.Input[str]
        auth_token: pulumi.Input[str]
        from_number: pulumi.Input[str]
        to_number: pulumi.Input[str]
elif False:
    TwilioConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TwilioConfigArgs:
    def __init__(__self__, *,
                 account_sid: pulumi.Input[str],
                 auth_token: pulumi.Input[str],
                 from_number: pulumi.Input[str],
                 to_number: pulumi.Input[str]):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "from_number", from_number)
        pulumi.set(__self__, "to_number", to_number)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_sid")

    @account_sid.setter
    def account_sid(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_sid", value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="fromNumber")
    def from_number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_number")

    @from_number.setter
    def from_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_number", value)

    @property
    @pulumi.getter(name="toNumber")
    def to_number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "to_number")

    @to_number.setter
    def to_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "to_number", value)


if not MYPY:
    class WatchtowerFlagsArgsDict(TypedDict):
        validator_identity: pulumi.Input[Sequence[pulumi.Input[str]]]
        active_stake_alert_threshold: NotRequired[pulumi.Input[int]]
        ignore_http_bad_gateway: NotRequired[pulumi.Input[bool]]
        interval: NotRequired[pulumi.Input[int]]
        minimum_validator_identity_balance: NotRequired[pulumi.Input[int]]
        monitor_active_stake: NotRequired[pulumi.Input[bool]]
        name_suffix: NotRequired[pulumi.Input[str]]
        rpc_timeout: NotRequired[pulumi.Input[int]]
        unhealthy_threshold: NotRequired[pulumi.Input[int]]
elif False:
    WatchtowerFlagsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WatchtowerFlagsArgs:
    def __init__(__self__, *,
                 validator_identity: pulumi.Input[Sequence[pulumi.Input[str]]],
                 active_stake_alert_threshold: Optional[pulumi.Input[int]] = None,
                 ignore_http_bad_gateway: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 minimum_validator_identity_balance: Optional[pulumi.Input[int]] = None,
                 monitor_active_stake: Optional[pulumi.Input[bool]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 rpc_timeout: Optional[pulumi.Input[int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "validator_identity", validator_identity)
        if active_stake_alert_threshold is not None:
            pulumi.set(__self__, "active_stake_alert_threshold", active_stake_alert_threshold)
        if ignore_http_bad_gateway is not None:
            pulumi.set(__self__, "ignore_http_bad_gateway", ignore_http_bad_gateway)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if minimum_validator_identity_balance is not None:
            pulumi.set(__self__, "minimum_validator_identity_balance", minimum_validator_identity_balance)
        if monitor_active_stake is not None:
            pulumi.set(__self__, "monitor_active_stake", monitor_active_stake)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if rpc_timeout is not None:
            pulumi.set(__self__, "rpc_timeout", rpc_timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="validatorIdentity")
    def validator_identity(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "validator_identity")

    @validator_identity.setter
    def validator_identity(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "validator_identity", value)

    @property
    @pulumi.getter(name="activeStakeAlertThreshold")
    def active_stake_alert_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "active_stake_alert_threshold")

    @active_stake_alert_threshold.setter
    def active_stake_alert_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_stake_alert_threshold", value)

    @property
    @pulumi.getter(name="ignoreHttpBadGateway")
    def ignore_http_bad_gateway(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_http_bad_gateway")

    @ignore_http_bad_gateway.setter
    def ignore_http_bad_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_http_bad_gateway", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="minimumValidatorIdentityBalance")
    def minimum_validator_identity_balance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_validator_identity_balance")

    @minimum_validator_identity_balance.setter
    def minimum_validator_identity_balance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_validator_identity_balance", value)

    @property
    @pulumi.getter(name="monitorActiveStake")
    def monitor_active_stake(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitor_active_stake")

    @monitor_active_stake.setter
    def monitor_active_stake(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_active_stake", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter(name="rpcTimeout")
    def rpc_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rpc_timeout")

    @rpc_timeout.setter
    def rpc_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rpc_timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_threshold", value)


