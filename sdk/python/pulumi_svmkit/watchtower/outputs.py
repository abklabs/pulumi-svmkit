# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'DiscordConfig',
    'NotificationConfig',
    'PagerDutyConfig',
    'SlackConfig',
    'TelegramConfig',
    'TwilioConfig',
    'WatchtowerFlags',
]

@pulumi.output_type
class DiscordConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "webhookUrl":
            suggest = "webhook_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscordConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscordConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscordConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 webhook_url: str):
        pulumi.set(__self__, "webhook_url", webhook_url)

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> str:
        return pulumi.get(self, "webhook_url")


@pulumi.output_type
class NotificationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pagerDuty":
            suggest = "pager_duty"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 discord: Optional['outputs.DiscordConfig'] = None,
                 pager_duty: Optional['outputs.PagerDutyConfig'] = None,
                 slack: Optional['outputs.SlackConfig'] = None,
                 telegram: Optional['outputs.TelegramConfig'] = None,
                 twilio: Optional['outputs.TwilioConfig'] = None):
        if discord is not None:
            pulumi.set(__self__, "discord", discord)
        if pager_duty is not None:
            pulumi.set(__self__, "pager_duty", pager_duty)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if telegram is not None:
            pulumi.set(__self__, "telegram", telegram)
        if twilio is not None:
            pulumi.set(__self__, "twilio", twilio)

    @property
    @pulumi.getter
    def discord(self) -> Optional['outputs.DiscordConfig']:
        return pulumi.get(self, "discord")

    @property
    @pulumi.getter(name="pagerDuty")
    def pager_duty(self) -> Optional['outputs.PagerDutyConfig']:
        return pulumi.get(self, "pager_duty")

    @property
    @pulumi.getter
    def slack(self) -> Optional['outputs.SlackConfig']:
        return pulumi.get(self, "slack")

    @property
    @pulumi.getter
    def telegram(self) -> Optional['outputs.TelegramConfig']:
        return pulumi.get(self, "telegram")

    @property
    @pulumi.getter
    def twilio(self) -> Optional['outputs.TwilioConfig']:
        return pulumi.get(self, "twilio")


@pulumi.output_type
class PagerDutyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "integrationKey":
            suggest = "integration_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PagerDutyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PagerDutyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PagerDutyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 integration_key: str):
        pulumi.set(__self__, "integration_key", integration_key)

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        return pulumi.get(self, "integration_key")


@pulumi.output_type
class SlackConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "webhookUrl":
            suggest = "webhook_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SlackConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SlackConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SlackConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 webhook_url: str):
        pulumi.set(__self__, "webhook_url", webhook_url)

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> str:
        return pulumi.get(self, "webhook_url")


@pulumi.output_type
class TelegramConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "botToken":
            suggest = "bot_token"
        elif key == "chatId":
            suggest = "chat_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TelegramConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TelegramConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TelegramConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bot_token: str,
                 chat_id: str):
        pulumi.set(__self__, "bot_token", bot_token)
        pulumi.set(__self__, "chat_id", chat_id)

    @property
    @pulumi.getter(name="botToken")
    def bot_token(self) -> str:
        return pulumi.get(self, "bot_token")

    @property
    @pulumi.getter(name="chatId")
    def chat_id(self) -> str:
        return pulumi.get(self, "chat_id")


@pulumi.output_type
class TwilioConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountSid":
            suggest = "account_sid"
        elif key == "authToken":
            suggest = "auth_token"
        elif key == "fromNumber":
            suggest = "from_number"
        elif key == "toNumber":
            suggest = "to_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwilioConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwilioConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwilioConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_sid: str,
                 auth_token: str,
                 from_number: str,
                 to_number: str):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "from_number", from_number)
        pulumi.set(__self__, "to_number", to_number)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> str:
        return pulumi.get(self, "account_sid")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="fromNumber")
    def from_number(self) -> str:
        return pulumi.get(self, "from_number")

    @property
    @pulumi.getter(name="toNumber")
    def to_number(self) -> str:
        return pulumi.get(self, "to_number")


@pulumi.output_type
class WatchtowerFlags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validatorIdentity":
            suggest = "validator_identity"
        elif key == "activeStakeAlertThreshold":
            suggest = "active_stake_alert_threshold"
        elif key == "ignoreHttpBadGateway":
            suggest = "ignore_http_bad_gateway"
        elif key == "minimumValidatorIdentityBalance":
            suggest = "minimum_validator_identity_balance"
        elif key == "monitorActiveStake":
            suggest = "monitor_active_stake"
        elif key == "nameSuffix":
            suggest = "name_suffix"
        elif key == "rpcTimeout":
            suggest = "rpc_timeout"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WatchtowerFlags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WatchtowerFlags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WatchtowerFlags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 validator_identity: Sequence[str],
                 active_stake_alert_threshold: Optional[int] = None,
                 ignore_http_bad_gateway: Optional[bool] = None,
                 interval: Optional[int] = None,
                 minimum_validator_identity_balance: Optional[int] = None,
                 monitor_active_stake: Optional[bool] = None,
                 name_suffix: Optional[str] = None,
                 rpc_timeout: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None):
        pulumi.set(__self__, "validator_identity", validator_identity)
        if active_stake_alert_threshold is not None:
            pulumi.set(__self__, "active_stake_alert_threshold", active_stake_alert_threshold)
        if ignore_http_bad_gateway is not None:
            pulumi.set(__self__, "ignore_http_bad_gateway", ignore_http_bad_gateway)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if minimum_validator_identity_balance is not None:
            pulumi.set(__self__, "minimum_validator_identity_balance", minimum_validator_identity_balance)
        if monitor_active_stake is not None:
            pulumi.set(__self__, "monitor_active_stake", monitor_active_stake)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if rpc_timeout is not None:
            pulumi.set(__self__, "rpc_timeout", rpc_timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="validatorIdentity")
    def validator_identity(self) -> Sequence[str]:
        return pulumi.get(self, "validator_identity")

    @property
    @pulumi.getter(name="activeStakeAlertThreshold")
    def active_stake_alert_threshold(self) -> Optional[int]:
        return pulumi.get(self, "active_stake_alert_threshold")

    @property
    @pulumi.getter(name="ignoreHttpBadGateway")
    def ignore_http_bad_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_http_bad_gateway")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="minimumValidatorIdentityBalance")
    def minimum_validator_identity_balance(self) -> Optional[int]:
        return pulumi.get(self, "minimum_validator_identity_balance")

    @property
    @pulumi.getter(name="monitorActiveStake")
    def monitor_active_stake(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_active_stake")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter(name="rpcTimeout")
    def rpc_timeout(self) -> Optional[int]:
        return pulumi.get(self, "rpc_timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "unhealthy_threshold")


