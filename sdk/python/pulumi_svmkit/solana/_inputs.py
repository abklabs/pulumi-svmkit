# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GenesisFlagsArgs',
    'GenesisFlagsArgsDict',
]

MYPY = False

if not MYPY:
    class GenesisFlagsArgsDict(TypedDict):
        faucet_pubkey: pulumi.Input[str]
        identity_pubkey: pulumi.Input[str]
        ledger_path: pulumi.Input[str]
        stake_pubkey: pulumi.Input[str]
        vote_pubkey: pulumi.Input[str]
        cluster_type: NotRequired[pulumi.Input[str]]
        faucet_lamports: NotRequired[pulumi.Input[str]]
        inflation: NotRequired[pulumi.Input[str]]
        lamports_per_byte_year: NotRequired[pulumi.Input[str]]
        slot_per_epoch: NotRequired[pulumi.Input[str]]
        target_lamports_per_signature: NotRequired[pulumi.Input[str]]
elif False:
    GenesisFlagsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GenesisFlagsArgs:
    def __init__(__self__, *,
                 faucet_pubkey: pulumi.Input[str],
                 identity_pubkey: pulumi.Input[str],
                 ledger_path: pulumi.Input[str],
                 stake_pubkey: pulumi.Input[str],
                 vote_pubkey: pulumi.Input[str],
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 faucet_lamports: Optional[pulumi.Input[str]] = None,
                 inflation: Optional[pulumi.Input[str]] = None,
                 lamports_per_byte_year: Optional[pulumi.Input[str]] = None,
                 slot_per_epoch: Optional[pulumi.Input[str]] = None,
                 target_lamports_per_signature: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "faucet_pubkey", faucet_pubkey)
        pulumi.set(__self__, "identity_pubkey", identity_pubkey)
        pulumi.set(__self__, "ledger_path", ledger_path)
        pulumi.set(__self__, "stake_pubkey", stake_pubkey)
        pulumi.set(__self__, "vote_pubkey", vote_pubkey)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if faucet_lamports is not None:
            pulumi.set(__self__, "faucet_lamports", faucet_lamports)
        if inflation is not None:
            pulumi.set(__self__, "inflation", inflation)
        if lamports_per_byte_year is not None:
            pulumi.set(__self__, "lamports_per_byte_year", lamports_per_byte_year)
        if slot_per_epoch is not None:
            pulumi.set(__self__, "slot_per_epoch", slot_per_epoch)
        if target_lamports_per_signature is not None:
            pulumi.set(__self__, "target_lamports_per_signature", target_lamports_per_signature)

    @property
    @pulumi.getter(name="faucetPubkey")
    def faucet_pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "faucet_pubkey")

    @faucet_pubkey.setter
    def faucet_pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "faucet_pubkey", value)

    @property
    @pulumi.getter(name="identityPubkey")
    def identity_pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identity_pubkey")

    @identity_pubkey.setter
    def identity_pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_pubkey", value)

    @property
    @pulumi.getter(name="ledgerPath")
    def ledger_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ledger_path")

    @ledger_path.setter
    def ledger_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "ledger_path", value)

    @property
    @pulumi.getter(name="stakePubkey")
    def stake_pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stake_pubkey")

    @stake_pubkey.setter
    def stake_pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "stake_pubkey", value)

    @property
    @pulumi.getter(name="votePubkey")
    def vote_pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vote_pubkey")

    @vote_pubkey.setter
    def vote_pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "vote_pubkey", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="faucetLamports")
    def faucet_lamports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faucet_lamports")

    @faucet_lamports.setter
    def faucet_lamports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faucet_lamports", value)

    @property
    @pulumi.getter
    def inflation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inflation")

    @inflation.setter
    def inflation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inflation", value)

    @property
    @pulumi.getter(name="lamportsPerByteYear")
    def lamports_per_byte_year(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lamports_per_byte_year")

    @lamports_per_byte_year.setter
    def lamports_per_byte_year(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lamports_per_byte_year", value)

    @property
    @pulumi.getter(name="slotPerEpoch")
    def slot_per_epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot_per_epoch")

    @slot_per_epoch.setter
    def slot_per_epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_per_epoch", value)

    @property
    @pulumi.getter(name="targetLamportsPerSignature")
    def target_lamports_per_signature(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_lamports_per_signature")

    @target_lamports_per_signature.setter
    def target_lamports_per_signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_lamports_per_signature", value)


