# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GenesisFlags',
]

@pulumi.output_type
class GenesisFlags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "faucetPubkey":
            suggest = "faucet_pubkey"
        elif key == "identityPubkey":
            suggest = "identity_pubkey"
        elif key == "ledgerPath":
            suggest = "ledger_path"
        elif key == "stakePubkey":
            suggest = "stake_pubkey"
        elif key == "votePubkey":
            suggest = "vote_pubkey"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "faucetLamports":
            suggest = "faucet_lamports"
        elif key == "lamportsPerByteYear":
            suggest = "lamports_per_byte_year"
        elif key == "slotPerEpoch":
            suggest = "slot_per_epoch"
        elif key == "targetLamportsPerSignature":
            suggest = "target_lamports_per_signature"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GenesisFlags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GenesisFlags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GenesisFlags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 faucet_pubkey: str,
                 identity_pubkey: str,
                 ledger_path: str,
                 stake_pubkey: str,
                 vote_pubkey: str,
                 cluster_type: Optional[str] = None,
                 faucet_lamports: Optional[str] = None,
                 inflation: Optional[str] = None,
                 lamports_per_byte_year: Optional[str] = None,
                 slot_per_epoch: Optional[str] = None,
                 target_lamports_per_signature: Optional[str] = None):
        pulumi.set(__self__, "faucet_pubkey", faucet_pubkey)
        pulumi.set(__self__, "identity_pubkey", identity_pubkey)
        pulumi.set(__self__, "ledger_path", ledger_path)
        pulumi.set(__self__, "stake_pubkey", stake_pubkey)
        pulumi.set(__self__, "vote_pubkey", vote_pubkey)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if faucet_lamports is not None:
            pulumi.set(__self__, "faucet_lamports", faucet_lamports)
        if inflation is not None:
            pulumi.set(__self__, "inflation", inflation)
        if lamports_per_byte_year is not None:
            pulumi.set(__self__, "lamports_per_byte_year", lamports_per_byte_year)
        if slot_per_epoch is not None:
            pulumi.set(__self__, "slot_per_epoch", slot_per_epoch)
        if target_lamports_per_signature is not None:
            pulumi.set(__self__, "target_lamports_per_signature", target_lamports_per_signature)

    @property
    @pulumi.getter(name="faucetPubkey")
    def faucet_pubkey(self) -> str:
        return pulumi.get(self, "faucet_pubkey")

    @property
    @pulumi.getter(name="identityPubkey")
    def identity_pubkey(self) -> str:
        return pulumi.get(self, "identity_pubkey")

    @property
    @pulumi.getter(name="ledgerPath")
    def ledger_path(self) -> str:
        return pulumi.get(self, "ledger_path")

    @property
    @pulumi.getter(name="stakePubkey")
    def stake_pubkey(self) -> str:
        return pulumi.get(self, "stake_pubkey")

    @property
    @pulumi.getter(name="votePubkey")
    def vote_pubkey(self) -> str:
        return pulumi.get(self, "vote_pubkey")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="faucetLamports")
    def faucet_lamports(self) -> Optional[str]:
        return pulumi.get(self, "faucet_lamports")

    @property
    @pulumi.getter
    def inflation(self) -> Optional[str]:
        return pulumi.get(self, "inflation")

    @property
    @pulumi.getter(name="lamportsPerByteYear")
    def lamports_per_byte_year(self) -> Optional[str]:
        return pulumi.get(self, "lamports_per_byte_year")

    @property
    @pulumi.getter(name="slotPerEpoch")
    def slot_per_epoch(self) -> Optional[str]:
        return pulumi.get(self, "slot_per_epoch")

    @property
    @pulumi.getter(name="targetLamportsPerSignature")
    def target_lamports_per_signature(self) -> Optional[str]:
        return pulumi.get(self, "target_lamports_per_signature")


