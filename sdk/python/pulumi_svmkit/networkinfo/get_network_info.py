# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import solana

__all__ = [
    'GetNetworkInfoResult',
    'AwaitableGetNetworkInfoResult',
    'get_network_info',
    'get_network_info_output',
]

@pulumi.output_type
class GetNetworkInfoResult:
    def __init__(__self__, entry_point=None, genesis_hash=None, known_validator=None, network_name=None, rpc_url=None):
        if entry_point and not isinstance(entry_point, list):
            raise TypeError("Expected argument 'entry_point' to be a list")
        pulumi.set(__self__, "entry_point", entry_point)
        if genesis_hash and not isinstance(genesis_hash, str):
            raise TypeError("Expected argument 'genesis_hash' to be a str")
        pulumi.set(__self__, "genesis_hash", genesis_hash)
        if known_validator and not isinstance(known_validator, list):
            raise TypeError("Expected argument 'known_validator' to be a list")
        pulumi.set(__self__, "known_validator", known_validator)
        if network_name and not isinstance(network_name, str):
            raise TypeError("Expected argument 'network_name' to be a str")
        pulumi.set(__self__, "network_name", network_name)
        if rpc_url and not isinstance(rpc_url, list):
            raise TypeError("Expected argument 'rpc_url' to be a list")
        pulumi.set(__self__, "rpc_url", rpc_url)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Sequence[str]:
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="genesisHash")
    def genesis_hash(self) -> str:
        return pulumi.get(self, "genesis_hash")

    @property
    @pulumi.getter(name="knownValidator")
    def known_validator(self) -> Sequence[str]:
        return pulumi.get(self, "known_validator")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> 'solana.NetworkName':
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="rpcURL")
    def rpc_url(self) -> Sequence[str]:
        return pulumi.get(self, "rpc_url")


class AwaitableGetNetworkInfoResult(GetNetworkInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkInfoResult(
            entry_point=self.entry_point,
            genesis_hash=self.genesis_hash,
            known_validator=self.known_validator,
            network_name=self.network_name,
            rpc_url=self.rpc_url)


def get_network_info(network_name: Optional['solana.NetworkName'] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkInfoResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['networkName'] = network_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('svmkit:networkinfo:getNetworkInfo', __args__, opts=opts, typ=GetNetworkInfoResult).value

    return AwaitableGetNetworkInfoResult(
        entry_point=pulumi.get(__ret__, 'entry_point'),
        genesis_hash=pulumi.get(__ret__, 'genesis_hash'),
        known_validator=pulumi.get(__ret__, 'known_validator'),
        network_name=pulumi.get(__ret__, 'network_name'),
        rpc_url=pulumi.get(__ret__, 'rpc_url'))
def get_network_info_output(network_name: Optional[pulumi.Input['solana.NetworkName']] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkInfoResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['networkName'] = network_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('svmkit:networkinfo:getNetworkInfo', __args__, opts=opts, typ=GetNetworkInfoResult)
    return __ret__.apply(lambda __response__: GetNetworkInfoResult(
        entry_point=pulumi.get(__response__, 'entry_point'),
        genesis_hash=pulumi.get(__response__, 'genesis_hash'),
        known_validator=pulumi.get(__response__, 'known_validator'),
        network_name=pulumi.get(__response__, 'network_name'),
        rpc_url=pulumi.get(__response__, 'rpc_url')))
