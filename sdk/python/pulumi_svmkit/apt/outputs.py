# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Config',
    'SignedBy',
    'Source',
]

@pulumi.output_type
class Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeDefaultSources":
            suggest = "exclude_default_sources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_default_sources: Optional[_builtins.bool] = None,
                 sources: Optional[Sequence['outputs.Source']] = None):
        if exclude_default_sources is not None:
            pulumi.set(__self__, "exclude_default_sources", exclude_default_sources)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter(name="excludeDefaultSources")
    def exclude_default_sources(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "exclude_default_sources")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.Source']]:
        return pulumi.get(self, "sources")


@pulumi.output_type
class SignedBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKey":
            suggest = "public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SignedBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SignedBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SignedBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paths: Optional[Sequence[_builtins.str]] = None,
                 public_key: Optional[_builtins.str] = None):
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @_builtins.property
    @pulumi.getter
    def paths(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "paths")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "public_key")


@pulumi.output_type
class Source(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "URIs":
            suggest = "uris"
        elif key == "allowDowngradeToInsecure":
            suggest = "allow_downgrade_to_insecure"
        elif key == "allowInsecure":
            suggest = "allow_insecure"
        elif key == "allowWeak":
            suggest = "allow_weak"
        elif key == "checkDate":
            suggest = "check_date"
        elif key == "checkValidUntil":
            suggest = "check_valid_until"
        elif key == "dateMaxFuture":
            suggest = "date_max_future"
        elif key == "extraLines":
            suggest = "extra_lines"
        elif key == "inReleasePath":
            suggest = "in_release_path"
        elif key == "signedBy":
            suggest = "signed_by"
        elif key == "validUntilMax":
            suggest = "valid_until_max"
        elif key == "validUntilMin":
            suggest = "valid_until_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Source. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Source.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Source.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uris: Sequence[_builtins.str],
                 components: Sequence[_builtins.str],
                 suites: Sequence[_builtins.str],
                 types: Sequence[_builtins.str],
                 allow_downgrade_to_insecure: Optional[_builtins.bool] = None,
                 allow_insecure: Optional[_builtins.bool] = None,
                 allow_weak: Optional[_builtins.bool] = None,
                 architectures: Optional[Sequence[_builtins.str]] = None,
                 check_date: Optional[_builtins.bool] = None,
                 check_valid_until: Optional[_builtins.bool] = None,
                 date_max_future: Optional[_builtins.int] = None,
                 extra_lines: Optional[Sequence[_builtins.str]] = None,
                 in_release_path: Optional[_builtins.str] = None,
                 signed_by: Optional['outputs.SignedBy'] = None,
                 snapshot: Optional[_builtins.str] = None,
                 trusted: Optional[_builtins.bool] = None,
                 valid_until_max: Optional[_builtins.int] = None,
                 valid_until_min: Optional[_builtins.int] = None):
        pulumi.set(__self__, "uris", uris)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "suites", suites)
        pulumi.set(__self__, "types", types)
        if allow_downgrade_to_insecure is not None:
            pulumi.set(__self__, "allow_downgrade_to_insecure", allow_downgrade_to_insecure)
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if allow_weak is not None:
            pulumi.set(__self__, "allow_weak", allow_weak)
        if architectures is not None:
            pulumi.set(__self__, "architectures", architectures)
        if check_date is not None:
            pulumi.set(__self__, "check_date", check_date)
        if check_valid_until is not None:
            pulumi.set(__self__, "check_valid_until", check_valid_until)
        if date_max_future is not None:
            pulumi.set(__self__, "date_max_future", date_max_future)
        if extra_lines is not None:
            pulumi.set(__self__, "extra_lines", extra_lines)
        if in_release_path is not None:
            pulumi.set(__self__, "in_release_path", in_release_path)
        if signed_by is not None:
            pulumi.set(__self__, "signed_by", signed_by)
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if valid_until_max is not None:
            pulumi.set(__self__, "valid_until_max", valid_until_max)
        if valid_until_min is not None:
            pulumi.set(__self__, "valid_until_min", valid_until_min)

    @_builtins.property
    @pulumi.getter(name="URIs")
    def uris(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "uris")

    @_builtins.property
    @pulumi.getter
    def components(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter
    def suites(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "suites")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "types")

    @_builtins.property
    @pulumi.getter(name="allowDowngradeToInsecure")
    def allow_downgrade_to_insecure(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "allow_downgrade_to_insecure")

    @_builtins.property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "allow_insecure")

    @_builtins.property
    @pulumi.getter(name="allowWeak")
    def allow_weak(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "allow_weak")

    @_builtins.property
    @pulumi.getter
    def architectures(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "architectures")

    @_builtins.property
    @pulumi.getter(name="checkDate")
    def check_date(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "check_date")

    @_builtins.property
    @pulumi.getter(name="checkValidUntil")
    def check_valid_until(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "check_valid_until")

    @_builtins.property
    @pulumi.getter(name="dateMaxFuture")
    def date_max_future(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "date_max_future")

    @_builtins.property
    @pulumi.getter(name="extraLines")
    def extra_lines(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "extra_lines")

    @_builtins.property
    @pulumi.getter(name="inReleasePath")
    def in_release_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "in_release_path")

    @_builtins.property
    @pulumi.getter(name="signedBy")
    def signed_by(self) -> Optional['outputs.SignedBy']:
        return pulumi.get(self, "signed_by")

    @_builtins.property
    @pulumi.getter
    def snapshot(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot")

    @_builtins.property
    @pulumi.getter
    def trusted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "trusted")

    @_builtins.property
    @pulumi.getter(name="validUntilMax")
    def valid_until_max(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "valid_until_max")

    @_builtins.property
    @pulumi.getter(name="validUntilMin")
    def valid_until_min(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "valid_until_min")


