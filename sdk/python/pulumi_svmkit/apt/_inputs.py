# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ConfigArgs',
    'ConfigArgsDict',
    'SignedByArgs',
    'SignedByArgsDict',
    'SourceArgs',
    'SourceArgsDict',
]

MYPY = False

if not MYPY:
    class ConfigArgsDict(TypedDict):
        exclude_default_sources: NotRequired[pulumi.Input[_builtins.bool]]
        sources: NotRequired[pulumi.Input[Sequence[pulumi.Input['SourceArgsDict']]]]
elif False:
    ConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 exclude_default_sources: Optional[pulumi.Input[_builtins.bool]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['SourceArgs']]]] = None):
        if exclude_default_sources is not None:
            pulumi.set(__self__, "exclude_default_sources", exclude_default_sources)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter(name="excludeDefaultSources")
    def exclude_default_sources(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "exclude_default_sources")

    @exclude_default_sources.setter
    def exclude_default_sources(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_default_sources", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceArgs']]]]):
        pulumi.set(self, "sources", value)


if not MYPY:
    class SignedByArgsDict(TypedDict):
        paths: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        public_key: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    SignedByArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SignedByArgs:
    def __init__(__self__, *,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 public_key: Optional[pulumi.Input[_builtins.str]] = None):
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @_builtins.property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "paths", value)

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_key", value)


if not MYPY:
    class SourceArgsDict(TypedDict):
        uris: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        components: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        suites: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        allow_downgrade_to_insecure: NotRequired[pulumi.Input[_builtins.bool]]
        allow_insecure: NotRequired[pulumi.Input[_builtins.bool]]
        allow_weak: NotRequired[pulumi.Input[_builtins.bool]]
        architectures: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        check_date: NotRequired[pulumi.Input[_builtins.bool]]
        check_valid_until: NotRequired[pulumi.Input[_builtins.bool]]
        date_max_future: NotRequired[pulumi.Input[_builtins.int]]
        extra_lines: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        in_release_path: NotRequired[pulumi.Input[_builtins.str]]
        signed_by: NotRequired[pulumi.Input['SignedByArgsDict']]
        snapshot: NotRequired[pulumi.Input[_builtins.str]]
        trusted: NotRequired[pulumi.Input[_builtins.bool]]
        valid_until_max: NotRequired[pulumi.Input[_builtins.int]]
        valid_until_min: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    SourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SourceArgs:
    def __init__(__self__, *,
                 uris: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 components: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 suites: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 allow_downgrade_to_insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_insecure: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_weak: Optional[pulumi.Input[_builtins.bool]] = None,
                 architectures: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 check_date: Optional[pulumi.Input[_builtins.bool]] = None,
                 check_valid_until: Optional[pulumi.Input[_builtins.bool]] = None,
                 date_max_future: Optional[pulumi.Input[_builtins.int]] = None,
                 extra_lines: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 in_release_path: Optional[pulumi.Input[_builtins.str]] = None,
                 signed_by: Optional[pulumi.Input['SignedByArgs']] = None,
                 snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 trusted: Optional[pulumi.Input[_builtins.bool]] = None,
                 valid_until_max: Optional[pulumi.Input[_builtins.int]] = None,
                 valid_until_min: Optional[pulumi.Input[_builtins.int]] = None):
        pulumi.set(__self__, "uris", uris)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "suites", suites)
        pulumi.set(__self__, "types", types)
        if allow_downgrade_to_insecure is not None:
            pulumi.set(__self__, "allow_downgrade_to_insecure", allow_downgrade_to_insecure)
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if allow_weak is not None:
            pulumi.set(__self__, "allow_weak", allow_weak)
        if architectures is not None:
            pulumi.set(__self__, "architectures", architectures)
        if check_date is not None:
            pulumi.set(__self__, "check_date", check_date)
        if check_valid_until is not None:
            pulumi.set(__self__, "check_valid_until", check_valid_until)
        if date_max_future is not None:
            pulumi.set(__self__, "date_max_future", date_max_future)
        if extra_lines is not None:
            pulumi.set(__self__, "extra_lines", extra_lines)
        if in_release_path is not None:
            pulumi.set(__self__, "in_release_path", in_release_path)
        if signed_by is not None:
            pulumi.set(__self__, "signed_by", signed_by)
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if valid_until_max is not None:
            pulumi.set(__self__, "valid_until_max", valid_until_max)
        if valid_until_min is not None:
            pulumi.set(__self__, "valid_until_min", valid_until_min)

    @_builtins.property
    @pulumi.getter(name="URIs")
    def uris(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "uris", value)

    @_builtins.property
    @pulumi.getter
    def components(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "components", value)

    @_builtins.property
    @pulumi.getter
    def suites(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "suites")

    @suites.setter
    def suites(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "suites", value)

    @_builtins.property
    @pulumi.getter
    def types(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "types", value)

    @_builtins.property
    @pulumi.getter(name="allowDowngradeToInsecure")
    def allow_downgrade_to_insecure(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "allow_downgrade_to_insecure")

    @allow_downgrade_to_insecure.setter
    def allow_downgrade_to_insecure(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_downgrade_to_insecure", value)

    @_builtins.property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_insecure", value)

    @_builtins.property
    @pulumi.getter(name="allowWeak")
    def allow_weak(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "allow_weak")

    @allow_weak.setter
    def allow_weak(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_weak", value)

    @_builtins.property
    @pulumi.getter
    def architectures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "architectures")

    @architectures.setter
    def architectures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "architectures", value)

    @_builtins.property
    @pulumi.getter(name="checkDate")
    def check_date(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "check_date")

    @check_date.setter
    def check_date(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "check_date", value)

    @_builtins.property
    @pulumi.getter(name="checkValidUntil")
    def check_valid_until(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "check_valid_until")

    @check_valid_until.setter
    def check_valid_until(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "check_valid_until", value)

    @_builtins.property
    @pulumi.getter(name="dateMaxFuture")
    def date_max_future(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "date_max_future")

    @date_max_future.setter
    def date_max_future(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "date_max_future", value)

    @_builtins.property
    @pulumi.getter(name="extraLines")
    def extra_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "extra_lines")

    @extra_lines.setter
    def extra_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "extra_lines", value)

    @_builtins.property
    @pulumi.getter(name="inReleasePath")
    def in_release_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "in_release_path")

    @in_release_path.setter
    def in_release_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "in_release_path", value)

    @_builtins.property
    @pulumi.getter(name="signedBy")
    def signed_by(self) -> Optional[pulumi.Input['SignedByArgs']]:
        return pulumi.get(self, "signed_by")

    @signed_by.setter
    def signed_by(self, value: Optional[pulumi.Input['SignedByArgs']]):
        pulumi.set(self, "signed_by", value)

    @_builtins.property
    @pulumi.getter
    def snapshot(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot", value)

    @_builtins.property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trusted", value)

    @_builtins.property
    @pulumi.getter(name="validUntilMax")
    def valid_until_max(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "valid_until_max")

    @valid_until_max.setter
    def valid_until_max(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "valid_until_max", value)

    @_builtins.property
    @pulumi.getter(name="validUntilMin")
    def valid_until_min(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "valid_until_min")

    @valid_until_min.setter
    def valid_until_min(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "valid_until_min", value)


