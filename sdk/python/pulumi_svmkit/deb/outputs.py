# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Package',
    'PackageConfig',
]

@pulumi.output_type
class Package(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetRelease":
            suggest = "target_release"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Package. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Package.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Package.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 path: Optional[_builtins.str] = None,
                 target_release: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if target_release is not None:
            pulumi.set(__self__, "target_release", target_release)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="targetRelease")
    def target_release(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target_release")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class PackageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overrideDir":
            suggest = "override_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PackageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PackageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PackageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional: Optional[Sequence[_builtins.str]] = None,
                 override: Optional[Sequence['outputs.Package']] = None,
                 override_dir: Optional[_builtins.str] = None):
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_dir is not None:
            pulumi.set(__self__, "override_dir", override_dir)

    @_builtins.property
    @pulumi.getter
    def additional(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "additional")

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[Sequence['outputs.Package']]:
        return pulumi.get(self, "override")

    @_builtins.property
    @pulumi.getter(name="overrideDir")
    def override_dir(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "override_dir")


