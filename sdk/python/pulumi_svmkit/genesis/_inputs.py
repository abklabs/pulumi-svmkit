# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GenesisFlagsArgs',
    'GenesisFlagsArgsDict',
    'PrimorialEntryArgs',
    'PrimorialEntryArgsDict',
]

MYPY = False

if not MYPY:
    class GenesisFlagsArgsDict(TypedDict):
        identity_pubkey: pulumi.Input[str]
        ledger_path: pulumi.Input[str]
        stake_pubkey: pulumi.Input[str]
        vote_pubkey: pulumi.Input[str]
        bootstrap_stake_authorized_pubkey: NotRequired[pulumi.Input[str]]
        bootstrap_validator_lamports: NotRequired[pulumi.Input[int]]
        bootstrap_validator_stake_lamports: NotRequired[pulumi.Input[int]]
        cluster_type: NotRequired[pulumi.Input[str]]
        creation_time: NotRequired[pulumi.Input[str]]
        deactivate_features: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        enable_warmup_epochs: NotRequired[pulumi.Input[bool]]
        extra_flags: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        faucet_lamports: NotRequired[pulumi.Input[int]]
        faucet_pubkey: NotRequired[pulumi.Input[str]]
        fee_burn_percentage: NotRequired[pulumi.Input[int]]
        hashes_per_tick: NotRequired[pulumi.Input[str]]
        inflation: NotRequired[pulumi.Input[str]]
        lamports_per_byte_year: NotRequired[pulumi.Input[int]]
        max_genesis_archive_unpacked_size: NotRequired[pulumi.Input[int]]
        rent_burn_percentage: NotRequired[pulumi.Input[int]]
        rent_exemption_threshold: NotRequired[pulumi.Input[int]]
        slot_per_epoch: NotRequired[pulumi.Input[int]]
        target_lamports_per_signature: NotRequired[pulumi.Input[int]]
        target_signatures_per_slot: NotRequired[pulumi.Input[int]]
        target_tick_duration: NotRequired[pulumi.Input[int]]
        ticks_per_slot: NotRequired[pulumi.Input[int]]
        url: NotRequired[pulumi.Input[str]]
        vote_commission_percentage: NotRequired[pulumi.Input[int]]
elif False:
    GenesisFlagsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GenesisFlagsArgs:
    def __init__(__self__, *,
                 identity_pubkey: pulumi.Input[str],
                 ledger_path: pulumi.Input[str],
                 stake_pubkey: pulumi.Input[str],
                 vote_pubkey: pulumi.Input[str],
                 bootstrap_stake_authorized_pubkey: Optional[pulumi.Input[str]] = None,
                 bootstrap_validator_lamports: Optional[pulumi.Input[int]] = None,
                 bootstrap_validator_stake_lamports: Optional[pulumi.Input[int]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 deactivate_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_warmup_epochs: Optional[pulumi.Input[bool]] = None,
                 extra_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 faucet_lamports: Optional[pulumi.Input[int]] = None,
                 faucet_pubkey: Optional[pulumi.Input[str]] = None,
                 fee_burn_percentage: Optional[pulumi.Input[int]] = None,
                 hashes_per_tick: Optional[pulumi.Input[str]] = None,
                 inflation: Optional[pulumi.Input[str]] = None,
                 lamports_per_byte_year: Optional[pulumi.Input[int]] = None,
                 max_genesis_archive_unpacked_size: Optional[pulumi.Input[int]] = None,
                 rent_burn_percentage: Optional[pulumi.Input[int]] = None,
                 rent_exemption_threshold: Optional[pulumi.Input[int]] = None,
                 slot_per_epoch: Optional[pulumi.Input[int]] = None,
                 target_lamports_per_signature: Optional[pulumi.Input[int]] = None,
                 target_signatures_per_slot: Optional[pulumi.Input[int]] = None,
                 target_tick_duration: Optional[pulumi.Input[int]] = None,
                 ticks_per_slot: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vote_commission_percentage: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "identity_pubkey", identity_pubkey)
        pulumi.set(__self__, "ledger_path", ledger_path)
        pulumi.set(__self__, "stake_pubkey", stake_pubkey)
        pulumi.set(__self__, "vote_pubkey", vote_pubkey)
        if bootstrap_stake_authorized_pubkey is not None:
            pulumi.set(__self__, "bootstrap_stake_authorized_pubkey", bootstrap_stake_authorized_pubkey)
        if bootstrap_validator_lamports is not None:
            pulumi.set(__self__, "bootstrap_validator_lamports", bootstrap_validator_lamports)
        if bootstrap_validator_stake_lamports is not None:
            pulumi.set(__self__, "bootstrap_validator_stake_lamports", bootstrap_validator_stake_lamports)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if deactivate_features is not None:
            pulumi.set(__self__, "deactivate_features", deactivate_features)
        if enable_warmup_epochs is not None:
            pulumi.set(__self__, "enable_warmup_epochs", enable_warmup_epochs)
        if extra_flags is not None:
            pulumi.set(__self__, "extra_flags", extra_flags)
        if faucet_lamports is not None:
            pulumi.set(__self__, "faucet_lamports", faucet_lamports)
        if faucet_pubkey is not None:
            pulumi.set(__self__, "faucet_pubkey", faucet_pubkey)
        if fee_burn_percentage is not None:
            pulumi.set(__self__, "fee_burn_percentage", fee_burn_percentage)
        if hashes_per_tick is not None:
            pulumi.set(__self__, "hashes_per_tick", hashes_per_tick)
        if inflation is not None:
            pulumi.set(__self__, "inflation", inflation)
        if lamports_per_byte_year is not None:
            pulumi.set(__self__, "lamports_per_byte_year", lamports_per_byte_year)
        if max_genesis_archive_unpacked_size is not None:
            pulumi.set(__self__, "max_genesis_archive_unpacked_size", max_genesis_archive_unpacked_size)
        if rent_burn_percentage is not None:
            pulumi.set(__self__, "rent_burn_percentage", rent_burn_percentage)
        if rent_exemption_threshold is not None:
            pulumi.set(__self__, "rent_exemption_threshold", rent_exemption_threshold)
        if slot_per_epoch is not None:
            pulumi.set(__self__, "slot_per_epoch", slot_per_epoch)
        if target_lamports_per_signature is not None:
            pulumi.set(__self__, "target_lamports_per_signature", target_lamports_per_signature)
        if target_signatures_per_slot is not None:
            pulumi.set(__self__, "target_signatures_per_slot", target_signatures_per_slot)
        if target_tick_duration is not None:
            pulumi.set(__self__, "target_tick_duration", target_tick_duration)
        if ticks_per_slot is not None:
            pulumi.set(__self__, "ticks_per_slot", ticks_per_slot)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vote_commission_percentage is not None:
            pulumi.set(__self__, "vote_commission_percentage", vote_commission_percentage)

    @property
    @pulumi.getter(name="identityPubkey")
    def identity_pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identity_pubkey")

    @identity_pubkey.setter
    def identity_pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_pubkey", value)

    @property
    @pulumi.getter(name="ledgerPath")
    def ledger_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ledger_path")

    @ledger_path.setter
    def ledger_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "ledger_path", value)

    @property
    @pulumi.getter(name="stakePubkey")
    def stake_pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stake_pubkey")

    @stake_pubkey.setter
    def stake_pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "stake_pubkey", value)

    @property
    @pulumi.getter(name="votePubkey")
    def vote_pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vote_pubkey")

    @vote_pubkey.setter
    def vote_pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "vote_pubkey", value)

    @property
    @pulumi.getter(name="bootstrapStakeAuthorizedPubkey")
    def bootstrap_stake_authorized_pubkey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bootstrap_stake_authorized_pubkey")

    @bootstrap_stake_authorized_pubkey.setter
    def bootstrap_stake_authorized_pubkey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_stake_authorized_pubkey", value)

    @property
    @pulumi.getter(name="bootstrapValidatorLamports")
    def bootstrap_validator_lamports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bootstrap_validator_lamports")

    @bootstrap_validator_lamports.setter
    def bootstrap_validator_lamports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bootstrap_validator_lamports", value)

    @property
    @pulumi.getter(name="bootstrapValidatorStakeLamports")
    def bootstrap_validator_stake_lamports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bootstrap_validator_stake_lamports")

    @bootstrap_validator_stake_lamports.setter
    def bootstrap_validator_stake_lamports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bootstrap_validator_stake_lamports", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="deactivateFeatures")
    def deactivate_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "deactivate_features")

    @deactivate_features.setter
    def deactivate_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deactivate_features", value)

    @property
    @pulumi.getter(name="enableWarmupEpochs")
    def enable_warmup_epochs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_warmup_epochs")

    @enable_warmup_epochs.setter
    def enable_warmup_epochs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_warmup_epochs", value)

    @property
    @pulumi.getter(name="extraFlags")
    def extra_flags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_flags")

    @extra_flags.setter
    def extra_flags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_flags", value)

    @property
    @pulumi.getter(name="faucetLamports")
    def faucet_lamports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "faucet_lamports")

    @faucet_lamports.setter
    def faucet_lamports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "faucet_lamports", value)

    @property
    @pulumi.getter(name="faucetPubkey")
    def faucet_pubkey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faucet_pubkey")

    @faucet_pubkey.setter
    def faucet_pubkey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faucet_pubkey", value)

    @property
    @pulumi.getter(name="feeBurnPercentage")
    def fee_burn_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fee_burn_percentage")

    @fee_burn_percentage.setter
    def fee_burn_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fee_burn_percentage", value)

    @property
    @pulumi.getter(name="hashesPerTick")
    def hashes_per_tick(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hashes_per_tick")

    @hashes_per_tick.setter
    def hashes_per_tick(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hashes_per_tick", value)

    @property
    @pulumi.getter
    def inflation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inflation")

    @inflation.setter
    def inflation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inflation", value)

    @property
    @pulumi.getter(name="lamportsPerByteYear")
    def lamports_per_byte_year(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lamports_per_byte_year")

    @lamports_per_byte_year.setter
    def lamports_per_byte_year(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lamports_per_byte_year", value)

    @property
    @pulumi.getter(name="maxGenesisArchiveUnpackedSize")
    def max_genesis_archive_unpacked_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_genesis_archive_unpacked_size")

    @max_genesis_archive_unpacked_size.setter
    def max_genesis_archive_unpacked_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_genesis_archive_unpacked_size", value)

    @property
    @pulumi.getter(name="rentBurnPercentage")
    def rent_burn_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rent_burn_percentage")

    @rent_burn_percentage.setter
    def rent_burn_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rent_burn_percentage", value)

    @property
    @pulumi.getter(name="rentExemptionThreshold")
    def rent_exemption_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rent_exemption_threshold")

    @rent_exemption_threshold.setter
    def rent_exemption_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rent_exemption_threshold", value)

    @property
    @pulumi.getter(name="slotPerEpoch")
    def slot_per_epoch(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "slot_per_epoch")

    @slot_per_epoch.setter
    def slot_per_epoch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slot_per_epoch", value)

    @property
    @pulumi.getter(name="targetLamportsPerSignature")
    def target_lamports_per_signature(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_lamports_per_signature")

    @target_lamports_per_signature.setter
    def target_lamports_per_signature(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_lamports_per_signature", value)

    @property
    @pulumi.getter(name="targetSignaturesPerSlot")
    def target_signatures_per_slot(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_signatures_per_slot")

    @target_signatures_per_slot.setter
    def target_signatures_per_slot(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_signatures_per_slot", value)

    @property
    @pulumi.getter(name="targetTickDuration")
    def target_tick_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_tick_duration")

    @target_tick_duration.setter
    def target_tick_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_tick_duration", value)

    @property
    @pulumi.getter(name="ticksPerSlot")
    def ticks_per_slot(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ticks_per_slot")

    @ticks_per_slot.setter
    def ticks_per_slot(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ticks_per_slot", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="voteCommissionPercentage")
    def vote_commission_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vote_commission_percentage")

    @vote_commission_percentage.setter
    def vote_commission_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vote_commission_percentage", value)


if not MYPY:
    class PrimorialEntryArgsDict(TypedDict):
        lamports: pulumi.Input[str]
        pubkey: pulumi.Input[str]
elif False:
    PrimorialEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrimorialEntryArgs:
    def __init__(__self__, *,
                 lamports: pulumi.Input[str],
                 pubkey: pulumi.Input[str]):
        pulumi.set(__self__, "lamports", lamports)
        pulumi.set(__self__, "pubkey", pubkey)

    @property
    @pulumi.getter
    def lamports(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lamports")

    @lamports.setter
    def lamports(self, value: pulumi.Input[str]):
        pulumi.set(self, "lamports", value)

    @property
    @pulumi.getter
    def pubkey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pubkey")

    @pubkey.setter
    def pubkey(self, value: pulumi.Input[str]):
        pulumi.set(self, "pubkey", value)


