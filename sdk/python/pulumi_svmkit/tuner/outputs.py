# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TunerKernelParams',
    'TunerNetParams',
    'TunerVmParams',
]

@pulumi.output_type
class TunerKernelParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kernelHungTaskTimeoutSecs":
            suggest = "kernel_hung_task_timeout_secs"
        elif key == "kernelNmiWatchdog":
            suggest = "kernel_nmi_watchdog"
        elif key == "kernelPidMax":
            suggest = "kernel_pid_max"
        elif key == "kernelSchedMinGranularityNs":
            suggest = "kernel_sched_min_granularity_ns"
        elif key == "kernelSchedWakeupGranularityNs":
            suggest = "kernel_sched_wakeup_granularity_ns"
        elif key == "kernelTimerMigration":
            suggest = "kernel_timer_migration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TunerKernelParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TunerKernelParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TunerKernelParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kernel_hung_task_timeout_secs: Optional[int] = None,
                 kernel_nmi_watchdog: Optional[int] = None,
                 kernel_pid_max: Optional[int] = None,
                 kernel_sched_min_granularity_ns: Optional[int] = None,
                 kernel_sched_wakeup_granularity_ns: Optional[int] = None,
                 kernel_timer_migration: Optional[int] = None):
        if kernel_hung_task_timeout_secs is not None:
            pulumi.set(__self__, "kernel_hung_task_timeout_secs", kernel_hung_task_timeout_secs)
        if kernel_nmi_watchdog is not None:
            pulumi.set(__self__, "kernel_nmi_watchdog", kernel_nmi_watchdog)
        if kernel_pid_max is not None:
            pulumi.set(__self__, "kernel_pid_max", kernel_pid_max)
        if kernel_sched_min_granularity_ns is not None:
            pulumi.set(__self__, "kernel_sched_min_granularity_ns", kernel_sched_min_granularity_ns)
        if kernel_sched_wakeup_granularity_ns is not None:
            pulumi.set(__self__, "kernel_sched_wakeup_granularity_ns", kernel_sched_wakeup_granularity_ns)
        if kernel_timer_migration is not None:
            pulumi.set(__self__, "kernel_timer_migration", kernel_timer_migration)

    @property
    @pulumi.getter(name="kernelHungTaskTimeoutSecs")
    def kernel_hung_task_timeout_secs(self) -> Optional[int]:
        return pulumi.get(self, "kernel_hung_task_timeout_secs")

    @property
    @pulumi.getter(name="kernelNmiWatchdog")
    def kernel_nmi_watchdog(self) -> Optional[int]:
        return pulumi.get(self, "kernel_nmi_watchdog")

    @property
    @pulumi.getter(name="kernelPidMax")
    def kernel_pid_max(self) -> Optional[int]:
        return pulumi.get(self, "kernel_pid_max")

    @property
    @pulumi.getter(name="kernelSchedMinGranularityNs")
    def kernel_sched_min_granularity_ns(self) -> Optional[int]:
        return pulumi.get(self, "kernel_sched_min_granularity_ns")

    @property
    @pulumi.getter(name="kernelSchedWakeupGranularityNs")
    def kernel_sched_wakeup_granularity_ns(self) -> Optional[int]:
        return pulumi.get(self, "kernel_sched_wakeup_granularity_ns")

    @property
    @pulumi.getter(name="kernelTimerMigration")
    def kernel_timer_migration(self) -> Optional[int]:
        return pulumi.get(self, "kernel_timer_migration")


@pulumi.output_type
class TunerNetParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netCoreRmemDefault":
            suggest = "net_core_rmem_default"
        elif key == "netCoreRmemMax":
            suggest = "net_core_rmem_max"
        elif key == "netCoreWmemDefault":
            suggest = "net_core_wmem_default"
        elif key == "netCoreWmemMax":
            suggest = "net_core_wmem_max"
        elif key == "netIpv4TcpCongestionControl":
            suggest = "net_ipv4_tcp_congestion_control"
        elif key == "netIpv4TcpFastopen":
            suggest = "net_ipv4_tcp_fastopen"
        elif key == "netIpv4TcpLowLatency":
            suggest = "net_ipv4_tcp_low_latency"
        elif key == "netIpv4TcpModerateRcvbuf":
            suggest = "net_ipv4_tcp_moderate_rcvbuf"
        elif key == "netIpv4TcpNoMetricsSave":
            suggest = "net_ipv4_tcp_no_metrics_save"
        elif key == "netIpv4TcpRmem":
            suggest = "net_ipv4_tcp_rmem"
        elif key == "netIpv4TcpSack":
            suggest = "net_ipv4_tcp_sack"
        elif key == "netIpv4TcpTimestamps":
            suggest = "net_ipv4_tcp_timestamps"
        elif key == "netIpv4TcpTwReuse":
            suggest = "net_ipv4_tcp_tw_reuse"
        elif key == "netIpv4TcpWmem":
            suggest = "net_ipv4_tcp_wmem"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TunerNetParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TunerNetParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TunerNetParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 net_core_rmem_default: Optional[int] = None,
                 net_core_rmem_max: Optional[int] = None,
                 net_core_wmem_default: Optional[int] = None,
                 net_core_wmem_max: Optional[int] = None,
                 net_ipv4_tcp_congestion_control: Optional[str] = None,
                 net_ipv4_tcp_fastopen: Optional[int] = None,
                 net_ipv4_tcp_low_latency: Optional[int] = None,
                 net_ipv4_tcp_moderate_rcvbuf: Optional[int] = None,
                 net_ipv4_tcp_no_metrics_save: Optional[int] = None,
                 net_ipv4_tcp_rmem: Optional[str] = None,
                 net_ipv4_tcp_sack: Optional[int] = None,
                 net_ipv4_tcp_timestamps: Optional[int] = None,
                 net_ipv4_tcp_tw_reuse: Optional[int] = None,
                 net_ipv4_tcp_wmem: Optional[str] = None):
        if net_core_rmem_default is not None:
            pulumi.set(__self__, "net_core_rmem_default", net_core_rmem_default)
        if net_core_rmem_max is not None:
            pulumi.set(__self__, "net_core_rmem_max", net_core_rmem_max)
        if net_core_wmem_default is not None:
            pulumi.set(__self__, "net_core_wmem_default", net_core_wmem_default)
        if net_core_wmem_max is not None:
            pulumi.set(__self__, "net_core_wmem_max", net_core_wmem_max)
        if net_ipv4_tcp_congestion_control is not None:
            pulumi.set(__self__, "net_ipv4_tcp_congestion_control", net_ipv4_tcp_congestion_control)
        if net_ipv4_tcp_fastopen is not None:
            pulumi.set(__self__, "net_ipv4_tcp_fastopen", net_ipv4_tcp_fastopen)
        if net_ipv4_tcp_low_latency is not None:
            pulumi.set(__self__, "net_ipv4_tcp_low_latency", net_ipv4_tcp_low_latency)
        if net_ipv4_tcp_moderate_rcvbuf is not None:
            pulumi.set(__self__, "net_ipv4_tcp_moderate_rcvbuf", net_ipv4_tcp_moderate_rcvbuf)
        if net_ipv4_tcp_no_metrics_save is not None:
            pulumi.set(__self__, "net_ipv4_tcp_no_metrics_save", net_ipv4_tcp_no_metrics_save)
        if net_ipv4_tcp_rmem is not None:
            pulumi.set(__self__, "net_ipv4_tcp_rmem", net_ipv4_tcp_rmem)
        if net_ipv4_tcp_sack is not None:
            pulumi.set(__self__, "net_ipv4_tcp_sack", net_ipv4_tcp_sack)
        if net_ipv4_tcp_timestamps is not None:
            pulumi.set(__self__, "net_ipv4_tcp_timestamps", net_ipv4_tcp_timestamps)
        if net_ipv4_tcp_tw_reuse is not None:
            pulumi.set(__self__, "net_ipv4_tcp_tw_reuse", net_ipv4_tcp_tw_reuse)
        if net_ipv4_tcp_wmem is not None:
            pulumi.set(__self__, "net_ipv4_tcp_wmem", net_ipv4_tcp_wmem)

    @property
    @pulumi.getter(name="netCoreRmemDefault")
    def net_core_rmem_default(self) -> Optional[int]:
        return pulumi.get(self, "net_core_rmem_default")

    @property
    @pulumi.getter(name="netCoreRmemMax")
    def net_core_rmem_max(self) -> Optional[int]:
        return pulumi.get(self, "net_core_rmem_max")

    @property
    @pulumi.getter(name="netCoreWmemDefault")
    def net_core_wmem_default(self) -> Optional[int]:
        return pulumi.get(self, "net_core_wmem_default")

    @property
    @pulumi.getter(name="netCoreWmemMax")
    def net_core_wmem_max(self) -> Optional[int]:
        return pulumi.get(self, "net_core_wmem_max")

    @property
    @pulumi.getter(name="netIpv4TcpCongestionControl")
    def net_ipv4_tcp_congestion_control(self) -> Optional[str]:
        return pulumi.get(self, "net_ipv4_tcp_congestion_control")

    @property
    @pulumi.getter(name="netIpv4TcpFastopen")
    def net_ipv4_tcp_fastopen(self) -> Optional[int]:
        return pulumi.get(self, "net_ipv4_tcp_fastopen")

    @property
    @pulumi.getter(name="netIpv4TcpLowLatency")
    def net_ipv4_tcp_low_latency(self) -> Optional[int]:
        return pulumi.get(self, "net_ipv4_tcp_low_latency")

    @property
    @pulumi.getter(name="netIpv4TcpModerateRcvbuf")
    def net_ipv4_tcp_moderate_rcvbuf(self) -> Optional[int]:
        return pulumi.get(self, "net_ipv4_tcp_moderate_rcvbuf")

    @property
    @pulumi.getter(name="netIpv4TcpNoMetricsSave")
    def net_ipv4_tcp_no_metrics_save(self) -> Optional[int]:
        return pulumi.get(self, "net_ipv4_tcp_no_metrics_save")

    @property
    @pulumi.getter(name="netIpv4TcpRmem")
    def net_ipv4_tcp_rmem(self) -> Optional[str]:
        return pulumi.get(self, "net_ipv4_tcp_rmem")

    @property
    @pulumi.getter(name="netIpv4TcpSack")
    def net_ipv4_tcp_sack(self) -> Optional[int]:
        return pulumi.get(self, "net_ipv4_tcp_sack")

    @property
    @pulumi.getter(name="netIpv4TcpTimestamps")
    def net_ipv4_tcp_timestamps(self) -> Optional[int]:
        return pulumi.get(self, "net_ipv4_tcp_timestamps")

    @property
    @pulumi.getter(name="netIpv4TcpTwReuse")
    def net_ipv4_tcp_tw_reuse(self) -> Optional[int]:
        return pulumi.get(self, "net_ipv4_tcp_tw_reuse")

    @property
    @pulumi.getter(name="netIpv4TcpWmem")
    def net_ipv4_tcp_wmem(self) -> Optional[str]:
        return pulumi.get(self, "net_ipv4_tcp_wmem")


@pulumi.output_type
class TunerVmParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmDirtyBackgroundRatio":
            suggest = "vm_dirty_background_ratio"
        elif key == "vmDirtyExpireCentisecs":
            suggest = "vm_dirty_expire_centisecs"
        elif key == "vmDirtyRatio":
            suggest = "vm_dirty_ratio"
        elif key == "vmDirtyWritebackCentisecs":
            suggest = "vm_dirty_writeback_centisecs"
        elif key == "vmDirtytimeExpireSeconds":
            suggest = "vm_dirtytime_expire_seconds"
        elif key == "vmMaxMapCount":
            suggest = "vm_max_map_count"
        elif key == "vmMinFreeKbytes":
            suggest = "vm_min_free_kbytes"
        elif key == "vmStatInterval":
            suggest = "vm_stat_interval"
        elif key == "vmSwappiness":
            suggest = "vm_swappiness"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TunerVmParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TunerVmParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TunerVmParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_dirty_background_ratio: Optional[int] = None,
                 vm_dirty_expire_centisecs: Optional[int] = None,
                 vm_dirty_ratio: Optional[int] = None,
                 vm_dirty_writeback_centisecs: Optional[int] = None,
                 vm_dirtytime_expire_seconds: Optional[int] = None,
                 vm_max_map_count: Optional[int] = None,
                 vm_min_free_kbytes: Optional[int] = None,
                 vm_stat_interval: Optional[int] = None,
                 vm_swappiness: Optional[int] = None):
        if vm_dirty_background_ratio is not None:
            pulumi.set(__self__, "vm_dirty_background_ratio", vm_dirty_background_ratio)
        if vm_dirty_expire_centisecs is not None:
            pulumi.set(__self__, "vm_dirty_expire_centisecs", vm_dirty_expire_centisecs)
        if vm_dirty_ratio is not None:
            pulumi.set(__self__, "vm_dirty_ratio", vm_dirty_ratio)
        if vm_dirty_writeback_centisecs is not None:
            pulumi.set(__self__, "vm_dirty_writeback_centisecs", vm_dirty_writeback_centisecs)
        if vm_dirtytime_expire_seconds is not None:
            pulumi.set(__self__, "vm_dirtytime_expire_seconds", vm_dirtytime_expire_seconds)
        if vm_max_map_count is not None:
            pulumi.set(__self__, "vm_max_map_count", vm_max_map_count)
        if vm_min_free_kbytes is not None:
            pulumi.set(__self__, "vm_min_free_kbytes", vm_min_free_kbytes)
        if vm_stat_interval is not None:
            pulumi.set(__self__, "vm_stat_interval", vm_stat_interval)
        if vm_swappiness is not None:
            pulumi.set(__self__, "vm_swappiness", vm_swappiness)

    @property
    @pulumi.getter(name="vmDirtyBackgroundRatio")
    def vm_dirty_background_ratio(self) -> Optional[int]:
        return pulumi.get(self, "vm_dirty_background_ratio")

    @property
    @pulumi.getter(name="vmDirtyExpireCentisecs")
    def vm_dirty_expire_centisecs(self) -> Optional[int]:
        return pulumi.get(self, "vm_dirty_expire_centisecs")

    @property
    @pulumi.getter(name="vmDirtyRatio")
    def vm_dirty_ratio(self) -> Optional[int]:
        return pulumi.get(self, "vm_dirty_ratio")

    @property
    @pulumi.getter(name="vmDirtyWritebackCentisecs")
    def vm_dirty_writeback_centisecs(self) -> Optional[int]:
        return pulumi.get(self, "vm_dirty_writeback_centisecs")

    @property
    @pulumi.getter(name="vmDirtytimeExpireSeconds")
    def vm_dirtytime_expire_seconds(self) -> Optional[int]:
        return pulumi.get(self, "vm_dirtytime_expire_seconds")

    @property
    @pulumi.getter(name="vmMaxMapCount")
    def vm_max_map_count(self) -> Optional[int]:
        return pulumi.get(self, "vm_max_map_count")

    @property
    @pulumi.getter(name="vmMinFreeKbytes")
    def vm_min_free_kbytes(self) -> Optional[int]:
        return pulumi.get(self, "vm_min_free_kbytes")

    @property
    @pulumi.getter(name="vmStatInterval")
    def vm_stat_interval(self) -> Optional[int]:
        return pulumi.get(self, "vm_stat_interval")

    @property
    @pulumi.getter(name="vmSwappiness")
    def vm_swappiness(self) -> Optional[int]:
        return pulumi.get(self, "vm_swappiness")


