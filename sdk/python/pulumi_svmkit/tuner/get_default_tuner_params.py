# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetDefaultTunerParamsResult',
    'AwaitableGetDefaultTunerParamsResult',
    'get_default_tuner_params',
    'get_default_tuner_params_output',
]

@pulumi.output_type
class GetDefaultTunerParamsResult:
    def __init__(__self__, cpu_governor=None, kernel=None, net=None, variant=None, vm=None):
        if cpu_governor and not isinstance(cpu_governor, str):
            raise TypeError("Expected argument 'cpu_governor' to be a str")
        pulumi.set(__self__, "cpu_governor", cpu_governor)
        if kernel and not isinstance(kernel, dict):
            raise TypeError("Expected argument 'kernel' to be a dict")
        pulumi.set(__self__, "kernel", kernel)
        if net and not isinstance(net, dict):
            raise TypeError("Expected argument 'net' to be a dict")
        pulumi.set(__self__, "net", net)
        if variant and not isinstance(variant, str):
            raise TypeError("Expected argument 'variant' to be a str")
        pulumi.set(__self__, "variant", variant)
        if vm and not isinstance(vm, dict):
            raise TypeError("Expected argument 'vm' to be a dict")
        pulumi.set(__self__, "vm", vm)

    @property
    @pulumi.getter(name="cpuGovernor")
    def cpu_governor(self) -> Optional['CpuGovernor']:
        return pulumi.get(self, "cpu_governor")

    @property
    @pulumi.getter
    def kernel(self) -> Optional['outputs.TunerKernelParams']:
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter
    def net(self) -> Optional['outputs.TunerNetParams']:
        return pulumi.get(self, "net")

    @property
    @pulumi.getter
    def variant(self) -> 'TunerVariant':
        return pulumi.get(self, "variant")

    @property
    @pulumi.getter
    def vm(self) -> Optional['outputs.TunerVmParams']:
        return pulumi.get(self, "vm")


class AwaitableGetDefaultTunerParamsResult(GetDefaultTunerParamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDefaultTunerParamsResult(
            cpu_governor=self.cpu_governor,
            kernel=self.kernel,
            net=self.net,
            variant=self.variant,
            vm=self.vm)


def get_default_tuner_params(variant: Optional['TunerVariant'] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDefaultTunerParamsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['variant'] = variant
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('svmkit:tuner:getDefaultTunerParams', __args__, opts=opts, typ=GetDefaultTunerParamsResult).value

    return AwaitableGetDefaultTunerParamsResult(
        cpu_governor=pulumi.get(__ret__, 'cpu_governor'),
        kernel=pulumi.get(__ret__, 'kernel'),
        net=pulumi.get(__ret__, 'net'),
        variant=pulumi.get(__ret__, 'variant'),
        vm=pulumi.get(__ret__, 'vm'))
def get_default_tuner_params_output(variant: Optional[pulumi.Input['TunerVariant']] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDefaultTunerParamsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['variant'] = variant
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('svmkit:tuner:getDefaultTunerParams', __args__, opts=opts, typ=GetDefaultTunerParamsResult)
    return __ret__.apply(lambda __response__: GetDefaultTunerParamsResult(
        cpu_governor=pulumi.get(__response__, 'cpu_governor'),
        kernel=pulumi.get(__response__, 'kernel'),
        net=pulumi.get(__response__, 'net'),
        variant=pulumi.get(__response__, 'variant'),
        vm=pulumi.get(__response__, 'vm')))
