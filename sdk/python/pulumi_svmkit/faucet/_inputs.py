# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FaucetFlagsArgs',
    'FaucetFlagsArgsDict',
]

MYPY = False

if not MYPY:
    class FaucetFlagsArgsDict(TypedDict):
        allow_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        per_request_cap: NotRequired[pulumi.Input[_builtins.int]]
        per_time_cap: NotRequired[pulumi.Input[_builtins.int]]
        slice_seconds: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    FaucetFlagsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FaucetFlagsArgs:
    def __init__(__self__, *,
                 allow_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 per_request_cap: Optional[pulumi.Input[_builtins.int]] = None,
                 per_time_cap: Optional[pulumi.Input[_builtins.int]] = None,
                 slice_seconds: Optional[pulumi.Input[_builtins.int]] = None):
        if allow_ips is not None:
            pulumi.set(__self__, "allow_ips", allow_ips)
        if per_request_cap is not None:
            pulumi.set(__self__, "per_request_cap", per_request_cap)
        if per_time_cap is not None:
            pulumi.set(__self__, "per_time_cap", per_time_cap)
        if slice_seconds is not None:
            pulumi.set(__self__, "slice_seconds", slice_seconds)

    @_builtins.property
    @pulumi.getter(name="allowIPs")
    def allow_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "allow_ips")

    @allow_ips.setter
    def allow_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_ips", value)

    @_builtins.property
    @pulumi.getter(name="perRequestCap")
    def per_request_cap(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "per_request_cap")

    @per_request_cap.setter
    def per_request_cap(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "per_request_cap", value)

    @_builtins.property
    @pulumi.getter(name="perTimeCap")
    def per_time_cap(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "per_time_cap")

    @per_time_cap.setter
    def per_time_cap(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "per_time_cap", value)

    @_builtins.property
    @pulumi.getter(name="sliceSeconds")
    def slice_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "slice_seconds")

    @slice_seconds.setter
    def slice_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "slice_seconds", value)


