# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ConfigConsensusArgs',
    'ConfigConsensusArgsDict',
    'ConfigGossipArgs',
    'ConfigGossipArgsDict',
    'ConfigHugeTLBFSArgs',
    'ConfigHugeTLBFSArgsDict',
    'ConfigLayoutArgs',
    'ConfigLayoutArgsDict',
    'ConfigLedgerArgs',
    'ConfigLedgerArgsDict',
    'ConfigLogArgs',
    'ConfigLogArgsDict',
    'ConfigRPCArgs',
    'ConfigRPCArgsDict',
    'ConfigReportingArgs',
    'ConfigReportingArgsDict',
    'ConfigSnapshotsArgs',
    'ConfigSnapshotsArgsDict',
    'ConfigArgs',
    'ConfigArgsDict',
    'KeyPairsArgs',
    'KeyPairsArgsDict',
]

MYPY = False

if not MYPY:
    class ConfigConsensusArgsDict(TypedDict):
        authorized_voter_paths: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        expected_bank_hash: NotRequired[pulumi.Input[str]]
        expected_genesis_hash: NotRequired[pulumi.Input[str]]
        expected_shred_version: NotRequired[pulumi.Input[int]]
        genesis_fetch: NotRequired[pulumi.Input[bool]]
        hard_fork_at_slots: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        identity_path: NotRequired[pulumi.Input[str]]
        known_validators: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        os_network_limits_test: NotRequired[pulumi.Input[bool]]
        poh_speed_test: NotRequired[pulumi.Input[bool]]
        snapshot_fetch: NotRequired[pulumi.Input[bool]]
        vote_account_path: NotRequired[pulumi.Input[str]]
        wait_for_supermajority_at_slot: NotRequired[pulumi.Input[int]]
        wait_for_vote_to_start_leader: NotRequired[pulumi.Input[bool]]
elif False:
    ConfigConsensusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConsensusArgs:
    def __init__(__self__, *,
                 authorized_voter_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expected_bank_hash: Optional[pulumi.Input[str]] = None,
                 expected_genesis_hash: Optional[pulumi.Input[str]] = None,
                 expected_shred_version: Optional[pulumi.Input[int]] = None,
                 genesis_fetch: Optional[pulumi.Input[bool]] = None,
                 hard_fork_at_slots: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity_path: Optional[pulumi.Input[str]] = None,
                 known_validators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os_network_limits_test: Optional[pulumi.Input[bool]] = None,
                 poh_speed_test: Optional[pulumi.Input[bool]] = None,
                 snapshot_fetch: Optional[pulumi.Input[bool]] = None,
                 vote_account_path: Optional[pulumi.Input[str]] = None,
                 wait_for_supermajority_at_slot: Optional[pulumi.Input[int]] = None,
                 wait_for_vote_to_start_leader: Optional[pulumi.Input[bool]] = None):
        if authorized_voter_paths is not None:
            pulumi.set(__self__, "authorized_voter_paths", authorized_voter_paths)
        if expected_bank_hash is not None:
            pulumi.set(__self__, "expected_bank_hash", expected_bank_hash)
        if expected_genesis_hash is not None:
            pulumi.set(__self__, "expected_genesis_hash", expected_genesis_hash)
        if expected_shred_version is not None:
            pulumi.set(__self__, "expected_shred_version", expected_shred_version)
        if genesis_fetch is not None:
            pulumi.set(__self__, "genesis_fetch", genesis_fetch)
        if hard_fork_at_slots is not None:
            pulumi.set(__self__, "hard_fork_at_slots", hard_fork_at_slots)
        if identity_path is not None:
            pulumi.set(__self__, "identity_path", identity_path)
        if known_validators is not None:
            pulumi.set(__self__, "known_validators", known_validators)
        if os_network_limits_test is not None:
            pulumi.set(__self__, "os_network_limits_test", os_network_limits_test)
        if poh_speed_test is not None:
            pulumi.set(__self__, "poh_speed_test", poh_speed_test)
        if snapshot_fetch is not None:
            pulumi.set(__self__, "snapshot_fetch", snapshot_fetch)
        if vote_account_path is not None:
            pulumi.set(__self__, "vote_account_path", vote_account_path)
        if wait_for_supermajority_at_slot is not None:
            pulumi.set(__self__, "wait_for_supermajority_at_slot", wait_for_supermajority_at_slot)
        if wait_for_vote_to_start_leader is not None:
            pulumi.set(__self__, "wait_for_vote_to_start_leader", wait_for_vote_to_start_leader)

    @property
    @pulumi.getter(name="authorizedVoterPaths")
    def authorized_voter_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "authorized_voter_paths")

    @authorized_voter_paths.setter
    def authorized_voter_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorized_voter_paths", value)

    @property
    @pulumi.getter(name="expectedBankHash")
    def expected_bank_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expected_bank_hash")

    @expected_bank_hash.setter
    def expected_bank_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected_bank_hash", value)

    @property
    @pulumi.getter(name="expectedGenesisHash")
    def expected_genesis_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expected_genesis_hash")

    @expected_genesis_hash.setter
    def expected_genesis_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected_genesis_hash", value)

    @property
    @pulumi.getter(name="expectedShredVersion")
    def expected_shred_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expected_shred_version")

    @expected_shred_version.setter
    def expected_shred_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expected_shred_version", value)

    @property
    @pulumi.getter(name="genesisFetch")
    def genesis_fetch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "genesis_fetch")

    @genesis_fetch.setter
    def genesis_fetch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "genesis_fetch", value)

    @property
    @pulumi.getter(name="hardForkAtSlots")
    def hard_fork_at_slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hard_fork_at_slots")

    @hard_fork_at_slots.setter
    def hard_fork_at_slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hard_fork_at_slots", value)

    @property
    @pulumi.getter(name="identityPath")
    def identity_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_path")

    @identity_path.setter
    def identity_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_path", value)

    @property
    @pulumi.getter(name="knownValidators")
    def known_validators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "known_validators")

    @known_validators.setter
    def known_validators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "known_validators", value)

    @property
    @pulumi.getter(name="osNetworkLimitsTest")
    def os_network_limits_test(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "os_network_limits_test")

    @os_network_limits_test.setter
    def os_network_limits_test(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "os_network_limits_test", value)

    @property
    @pulumi.getter(name="pohSpeedTest")
    def poh_speed_test(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "poh_speed_test")

    @poh_speed_test.setter
    def poh_speed_test(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poh_speed_test", value)

    @property
    @pulumi.getter(name="snapshotFetch")
    def snapshot_fetch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "snapshot_fetch")

    @snapshot_fetch.setter
    def snapshot_fetch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snapshot_fetch", value)

    @property
    @pulumi.getter(name="voteAccountPath")
    def vote_account_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vote_account_path")

    @vote_account_path.setter
    def vote_account_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vote_account_path", value)

    @property
    @pulumi.getter(name="waitForSupermajorityAtSlot")
    def wait_for_supermajority_at_slot(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wait_for_supermajority_at_slot")

    @wait_for_supermajority_at_slot.setter
    def wait_for_supermajority_at_slot(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_for_supermajority_at_slot", value)

    @property
    @pulumi.getter(name="waitForVoteToStartLeader")
    def wait_for_vote_to_start_leader(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "wait_for_vote_to_start_leader")

    @wait_for_vote_to_start_leader.setter
    def wait_for_vote_to_start_leader(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_vote_to_start_leader", value)


if not MYPY:
    class ConfigGossipArgsDict(TypedDict):
        entrypoints: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        host: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        port_check: NotRequired[pulumi.Input[bool]]
elif False:
    ConfigGossipArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigGossipArgs:
    def __init__(__self__, *,
                 entrypoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_check: Optional[pulumi.Input[bool]] = None):
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_check is not None:
            pulumi.set(__self__, "port_check", port_check)

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "entrypoints")

    @entrypoints.setter
    def entrypoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entrypoints", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portCheck")
    def port_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "port_check")

    @port_check.setter
    def port_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "port_check", value)


if not MYPY:
    class ConfigHugeTLBFSArgsDict(TypedDict):
        mount_path: NotRequired[pulumi.Input[str]]
elif False:
    ConfigHugeTLBFSArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigHugeTLBFSArgs:
    def __init__(__self__, *,
                 mount_path: Optional[pulumi.Input[str]] = None):
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)


if not MYPY:
    class ConfigLayoutArgsDict(TypedDict):
        affinity: NotRequired[pulumi.Input[str]]
        agave_affinity: NotRequired[pulumi.Input[str]]
        bank_tile_count: NotRequired[pulumi.Input[int]]
        net_tile_count: NotRequired[pulumi.Input[int]]
        quic_tile_count: NotRequired[pulumi.Input[int]]
        resolv_tile_count: NotRequired[pulumi.Input[int]]
        shred_tile_count: NotRequired[pulumi.Input[int]]
        verify_tile_count: NotRequired[pulumi.Input[int]]
elif False:
    ConfigLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigLayoutArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input[str]] = None,
                 agave_affinity: Optional[pulumi.Input[str]] = None,
                 bank_tile_count: Optional[pulumi.Input[int]] = None,
                 net_tile_count: Optional[pulumi.Input[int]] = None,
                 quic_tile_count: Optional[pulumi.Input[int]] = None,
                 resolv_tile_count: Optional[pulumi.Input[int]] = None,
                 shred_tile_count: Optional[pulumi.Input[int]] = None,
                 verify_tile_count: Optional[pulumi.Input[int]] = None):
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if agave_affinity is not None:
            pulumi.set(__self__, "agave_affinity", agave_affinity)
        if bank_tile_count is not None:
            pulumi.set(__self__, "bank_tile_count", bank_tile_count)
        if net_tile_count is not None:
            pulumi.set(__self__, "net_tile_count", net_tile_count)
        if quic_tile_count is not None:
            pulumi.set(__self__, "quic_tile_count", quic_tile_count)
        if resolv_tile_count is not None:
            pulumi.set(__self__, "resolv_tile_count", resolv_tile_count)
        if shred_tile_count is not None:
            pulumi.set(__self__, "shred_tile_count", shred_tile_count)
        if verify_tile_count is not None:
            pulumi.set(__self__, "verify_tile_count", verify_tile_count)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="agaveAffinity")
    def agave_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agave_affinity")

    @agave_affinity.setter
    def agave_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agave_affinity", value)

    @property
    @pulumi.getter(name="bankTileCount")
    def bank_tile_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bank_tile_count")

    @bank_tile_count.setter
    def bank_tile_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bank_tile_count", value)

    @property
    @pulumi.getter(name="netTileCount")
    def net_tile_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "net_tile_count")

    @net_tile_count.setter
    def net_tile_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "net_tile_count", value)

    @property
    @pulumi.getter(name="quicTileCount")
    def quic_tile_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quic_tile_count")

    @quic_tile_count.setter
    def quic_tile_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quic_tile_count", value)

    @property
    @pulumi.getter(name="resolvTileCount")
    def resolv_tile_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "resolv_tile_count")

    @resolv_tile_count.setter
    def resolv_tile_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resolv_tile_count", value)

    @property
    @pulumi.getter(name="shredTileCount")
    def shred_tile_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "shred_tile_count")

    @shred_tile_count.setter
    def shred_tile_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shred_tile_count", value)

    @property
    @pulumi.getter(name="verifyTileCount")
    def verify_tile_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "verify_tile_count")

    @verify_tile_count.setter
    def verify_tile_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "verify_tile_count", value)


if not MYPY:
    class ConfigLedgerArgsDict(TypedDict):
        account_index_exclude_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        account_index_include_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        account_indexes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        accounts_path: NotRequired[pulumi.Input[str]]
        limit_size: NotRequired[pulumi.Input[int]]
        path: NotRequired[pulumi.Input[str]]
        require_tower: NotRequired[pulumi.Input[bool]]
        snapshot_archive_format: NotRequired[pulumi.Input[str]]
elif False:
    ConfigLedgerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigLedgerArgs:
    def __init__(__self__, *,
                 account_index_exclude_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 account_index_include_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 account_indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 accounts_path: Optional[pulumi.Input[str]] = None,
                 limit_size: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 require_tower: Optional[pulumi.Input[bool]] = None,
                 snapshot_archive_format: Optional[pulumi.Input[str]] = None):
        if account_index_exclude_keys is not None:
            pulumi.set(__self__, "account_index_exclude_keys", account_index_exclude_keys)
        if account_index_include_keys is not None:
            pulumi.set(__self__, "account_index_include_keys", account_index_include_keys)
        if account_indexes is not None:
            pulumi.set(__self__, "account_indexes", account_indexes)
        if accounts_path is not None:
            pulumi.set(__self__, "accounts_path", accounts_path)
        if limit_size is not None:
            pulumi.set(__self__, "limit_size", limit_size)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if require_tower is not None:
            pulumi.set(__self__, "require_tower", require_tower)
        if snapshot_archive_format is not None:
            pulumi.set(__self__, "snapshot_archive_format", snapshot_archive_format)

    @property
    @pulumi.getter(name="accountIndexExcludeKeys")
    def account_index_exclude_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_index_exclude_keys")

    @account_index_exclude_keys.setter
    def account_index_exclude_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_index_exclude_keys", value)

    @property
    @pulumi.getter(name="accountIndexIncludeKeys")
    def account_index_include_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_index_include_keys")

    @account_index_include_keys.setter
    def account_index_include_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_index_include_keys", value)

    @property
    @pulumi.getter(name="accountIndexes")
    def account_indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_indexes")

    @account_indexes.setter
    def account_indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_indexes", value)

    @property
    @pulumi.getter(name="accountsPath")
    def accounts_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accounts_path")

    @accounts_path.setter
    def accounts_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accounts_path", value)

    @property
    @pulumi.getter(name="limitSize")
    def limit_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit_size")

    @limit_size.setter
    def limit_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit_size", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="requireTower")
    def require_tower(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_tower")

    @require_tower.setter
    def require_tower(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_tower", value)

    @property
    @pulumi.getter(name="snapshotArchiveFormat")
    def snapshot_archive_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_archive_format")

    @snapshot_archive_format.setter
    def snapshot_archive_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_archive_format", value)


if not MYPY:
    class ConfigLogArgsDict(TypedDict):
        colorize: NotRequired[pulumi.Input[str]]
        level_flush: NotRequired[pulumi.Input[str]]
        level_logfile: NotRequired[pulumi.Input[str]]
        level_stderr: NotRequired[pulumi.Input[str]]
        path: NotRequired[pulumi.Input[str]]
elif False:
    ConfigLogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigLogArgs:
    def __init__(__self__, *,
                 colorize: Optional[pulumi.Input[str]] = None,
                 level_flush: Optional[pulumi.Input[str]] = None,
                 level_logfile: Optional[pulumi.Input[str]] = None,
                 level_stderr: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        if colorize is not None:
            pulumi.set(__self__, "colorize", colorize)
        if level_flush is not None:
            pulumi.set(__self__, "level_flush", level_flush)
        if level_logfile is not None:
            pulumi.set(__self__, "level_logfile", level_logfile)
        if level_stderr is not None:
            pulumi.set(__self__, "level_stderr", level_stderr)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def colorize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "colorize")

    @colorize.setter
    def colorize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "colorize", value)

    @property
    @pulumi.getter(name="levelFlush")
    def level_flush(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level_flush")

    @level_flush.setter
    def level_flush(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level_flush", value)

    @property
    @pulumi.getter(name="levelLogfile")
    def level_logfile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level_logfile")

    @level_logfile.setter
    def level_logfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level_logfile", value)

    @property
    @pulumi.getter(name="levelStderr")
    def level_stderr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level_stderr")

    @level_stderr.setter
    def level_stderr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level_stderr", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class ConfigRPCArgsDict(TypedDict):
        bigtable_ledger_storage: NotRequired[pulumi.Input[bool]]
        extended_tx_metadata_storage: NotRequired[pulumi.Input[bool]]
        full_api: NotRequired[pulumi.Input[bool]]
        only_known: NotRequired[pulumi.Input[bool]]
        port: NotRequired[pulumi.Input[int]]
        private: NotRequired[pulumi.Input[bool]]
        pubsub_enable_block_subscription: NotRequired[pulumi.Input[bool]]
        pubsub_enable_vote_subscription: NotRequired[pulumi.Input[bool]]
        transaction_history: NotRequired[pulumi.Input[bool]]
elif False:
    ConfigRPCArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigRPCArgs:
    def __init__(__self__, *,
                 bigtable_ledger_storage: Optional[pulumi.Input[bool]] = None,
                 extended_tx_metadata_storage: Optional[pulumi.Input[bool]] = None,
                 full_api: Optional[pulumi.Input[bool]] = None,
                 only_known: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 pubsub_enable_block_subscription: Optional[pulumi.Input[bool]] = None,
                 pubsub_enable_vote_subscription: Optional[pulumi.Input[bool]] = None,
                 transaction_history: Optional[pulumi.Input[bool]] = None):
        if bigtable_ledger_storage is not None:
            pulumi.set(__self__, "bigtable_ledger_storage", bigtable_ledger_storage)
        if extended_tx_metadata_storage is not None:
            pulumi.set(__self__, "extended_tx_metadata_storage", extended_tx_metadata_storage)
        if full_api is not None:
            pulumi.set(__self__, "full_api", full_api)
        if only_known is not None:
            pulumi.set(__self__, "only_known", only_known)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if pubsub_enable_block_subscription is not None:
            pulumi.set(__self__, "pubsub_enable_block_subscription", pubsub_enable_block_subscription)
        if pubsub_enable_vote_subscription is not None:
            pulumi.set(__self__, "pubsub_enable_vote_subscription", pubsub_enable_vote_subscription)
        if transaction_history is not None:
            pulumi.set(__self__, "transaction_history", transaction_history)

    @property
    @pulumi.getter(name="bigtableLedgerStorage")
    def bigtable_ledger_storage(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bigtable_ledger_storage")

    @bigtable_ledger_storage.setter
    def bigtable_ledger_storage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bigtable_ledger_storage", value)

    @property
    @pulumi.getter(name="extendedTxMetadataStorage")
    def extended_tx_metadata_storage(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extended_tx_metadata_storage")

    @extended_tx_metadata_storage.setter
    def extended_tx_metadata_storage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extended_tx_metadata_storage", value)

    @property
    @pulumi.getter(name="fullApi")
    def full_api(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "full_api")

    @full_api.setter
    def full_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_api", value)

    @property
    @pulumi.getter(name="onlyKnown")
    def only_known(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "only_known")

    @only_known.setter
    def only_known(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_known", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="pubsubEnableBlockSubscription")
    def pubsub_enable_block_subscription(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pubsub_enable_block_subscription")

    @pubsub_enable_block_subscription.setter
    def pubsub_enable_block_subscription(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pubsub_enable_block_subscription", value)

    @property
    @pulumi.getter(name="pubsubEnableVoteSubscription")
    def pubsub_enable_vote_subscription(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pubsub_enable_vote_subscription")

    @pubsub_enable_vote_subscription.setter
    def pubsub_enable_vote_subscription(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pubsub_enable_vote_subscription", value)

    @property
    @pulumi.getter(name="transactionHistory")
    def transaction_history(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "transaction_history")

    @transaction_history.setter
    def transaction_history(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transaction_history", value)


if not MYPY:
    class ConfigReportingArgsDict(TypedDict):
        solana_metrics_config: NotRequired[pulumi.Input[str]]
elif False:
    ConfigReportingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigReportingArgs:
    def __init__(__self__, *,
                 solana_metrics_config: Optional[pulumi.Input[str]] = None):
        if solana_metrics_config is not None:
            pulumi.set(__self__, "solana_metrics_config", solana_metrics_config)

    @property
    @pulumi.getter(name="solanaMetricsConfig")
    def solana_metrics_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "solana_metrics_config")

    @solana_metrics_config.setter
    def solana_metrics_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solana_metrics_config", value)


if not MYPY:
    class ConfigSnapshotsArgsDict(TypedDict):
        full_snapshot_interval_slots: NotRequired[pulumi.Input[int]]
        incremental_path: NotRequired[pulumi.Input[str]]
        incremental_snapshot_interval_slots: NotRequired[pulumi.Input[int]]
        incremental_snapshots: NotRequired[pulumi.Input[bool]]
        maximum_full_snapshots_to_retain: NotRequired[pulumi.Input[int]]
        maximum_incremental_snapshots_to_retain: NotRequired[pulumi.Input[int]]
        minimum_snapshot_download_speed: NotRequired[pulumi.Input[int]]
        path: NotRequired[pulumi.Input[str]]
elif False:
    ConfigSnapshotsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigSnapshotsArgs:
    def __init__(__self__, *,
                 full_snapshot_interval_slots: Optional[pulumi.Input[int]] = None,
                 incremental_path: Optional[pulumi.Input[str]] = None,
                 incremental_snapshot_interval_slots: Optional[pulumi.Input[int]] = None,
                 incremental_snapshots: Optional[pulumi.Input[bool]] = None,
                 maximum_full_snapshots_to_retain: Optional[pulumi.Input[int]] = None,
                 maximum_incremental_snapshots_to_retain: Optional[pulumi.Input[int]] = None,
                 minimum_snapshot_download_speed: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        if full_snapshot_interval_slots is not None:
            pulumi.set(__self__, "full_snapshot_interval_slots", full_snapshot_interval_slots)
        if incremental_path is not None:
            pulumi.set(__self__, "incremental_path", incremental_path)
        if incremental_snapshot_interval_slots is not None:
            pulumi.set(__self__, "incremental_snapshot_interval_slots", incremental_snapshot_interval_slots)
        if incremental_snapshots is not None:
            pulumi.set(__self__, "incremental_snapshots", incremental_snapshots)
        if maximum_full_snapshots_to_retain is not None:
            pulumi.set(__self__, "maximum_full_snapshots_to_retain", maximum_full_snapshots_to_retain)
        if maximum_incremental_snapshots_to_retain is not None:
            pulumi.set(__self__, "maximum_incremental_snapshots_to_retain", maximum_incremental_snapshots_to_retain)
        if minimum_snapshot_download_speed is not None:
            pulumi.set(__self__, "minimum_snapshot_download_speed", minimum_snapshot_download_speed)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="fullSnapshotIntervalSlots")
    def full_snapshot_interval_slots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_snapshot_interval_slots")

    @full_snapshot_interval_slots.setter
    def full_snapshot_interval_slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_snapshot_interval_slots", value)

    @property
    @pulumi.getter(name="incrementalPath")
    def incremental_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incremental_path")

    @incremental_path.setter
    def incremental_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incremental_path", value)

    @property
    @pulumi.getter(name="incrementalSnapshotIntervalSlots")
    def incremental_snapshot_interval_slots(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "incremental_snapshot_interval_slots")

    @incremental_snapshot_interval_slots.setter
    def incremental_snapshot_interval_slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "incremental_snapshot_interval_slots", value)

    @property
    @pulumi.getter(name="incrementalSnapshots")
    def incremental_snapshots(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "incremental_snapshots")

    @incremental_snapshots.setter
    def incremental_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incremental_snapshots", value)

    @property
    @pulumi.getter(name="maximumFullSnapshotsToRetain")
    def maximum_full_snapshots_to_retain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_full_snapshots_to_retain")

    @maximum_full_snapshots_to_retain.setter
    def maximum_full_snapshots_to_retain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_full_snapshots_to_retain", value)

    @property
    @pulumi.getter(name="maximumIncrementalSnapshotsToRetain")
    def maximum_incremental_snapshots_to_retain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_incremental_snapshots_to_retain")

    @maximum_incremental_snapshots_to_retain.setter
    def maximum_incremental_snapshots_to_retain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_incremental_snapshots_to_retain", value)

    @property
    @pulumi.getter(name="minimumSnapshotDownloadSpeed")
    def minimum_snapshot_download_speed(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_snapshot_download_speed")

    @minimum_snapshot_download_speed.setter
    def minimum_snapshot_download_speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_snapshot_download_speed", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class ConfigArgsDict(TypedDict):
        consensus: NotRequired[pulumi.Input['ConfigConsensusArgsDict']]
        dynamic_port_range: NotRequired[pulumi.Input[str]]
        extra_config: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        gossip: NotRequired[pulumi.Input['ConfigGossipArgsDict']]
        hugetlbfs: NotRequired[pulumi.Input['ConfigHugeTLBFSArgsDict']]
        layout: NotRequired[pulumi.Input['ConfigLayoutArgsDict']]
        ledger: NotRequired[pulumi.Input['ConfigLedgerArgsDict']]
        log: NotRequired[pulumi.Input['ConfigLogArgsDict']]
        name: NotRequired[pulumi.Input[str]]
        reporting: NotRequired[pulumi.Input['ConfigReportingArgsDict']]
        rpc: NotRequired[pulumi.Input['ConfigRPCArgsDict']]
        scratch_directory: NotRequired[pulumi.Input[str]]
        snapshots: NotRequired[pulumi.Input['ConfigSnapshotsArgsDict']]
        user: NotRequired[pulumi.Input[str]]
elif False:
    ConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 consensus: Optional[pulumi.Input['ConfigConsensusArgs']] = None,
                 dynamic_port_range: Optional[pulumi.Input[str]] = None,
                 extra_config: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gossip: Optional[pulumi.Input['ConfigGossipArgs']] = None,
                 hugetlbfs: Optional[pulumi.Input['ConfigHugeTLBFSArgs']] = None,
                 layout: Optional[pulumi.Input['ConfigLayoutArgs']] = None,
                 ledger: Optional[pulumi.Input['ConfigLedgerArgs']] = None,
                 log: Optional[pulumi.Input['ConfigLogArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reporting: Optional[pulumi.Input['ConfigReportingArgs']] = None,
                 rpc: Optional[pulumi.Input['ConfigRPCArgs']] = None,
                 scratch_directory: Optional[pulumi.Input[str]] = None,
                 snapshots: Optional[pulumi.Input['ConfigSnapshotsArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if consensus is not None:
            pulumi.set(__self__, "consensus", consensus)
        if dynamic_port_range is not None:
            pulumi.set(__self__, "dynamic_port_range", dynamic_port_range)
        if extra_config is not None:
            pulumi.set(__self__, "extra_config", extra_config)
        if gossip is not None:
            pulumi.set(__self__, "gossip", gossip)
        if hugetlbfs is not None:
            pulumi.set(__self__, "hugetlbfs", hugetlbfs)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if ledger is not None:
            pulumi.set(__self__, "ledger", ledger)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reporting is not None:
            pulumi.set(__self__, "reporting", reporting)
        if rpc is not None:
            pulumi.set(__self__, "rpc", rpc)
        if scratch_directory is not None:
            pulumi.set(__self__, "scratch_directory", scratch_directory)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def consensus(self) -> Optional[pulumi.Input['ConfigConsensusArgs']]:
        return pulumi.get(self, "consensus")

    @consensus.setter
    def consensus(self, value: Optional[pulumi.Input['ConfigConsensusArgs']]):
        pulumi.set(self, "consensus", value)

    @property
    @pulumi.getter(name="dynamicPortRange")
    def dynamic_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_port_range")

    @dynamic_port_range.setter
    def dynamic_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_port_range", value)

    @property
    @pulumi.getter(name="extraConfig")
    def extra_config(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_config")

    @extra_config.setter
    def extra_config(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_config", value)

    @property
    @pulumi.getter
    def gossip(self) -> Optional[pulumi.Input['ConfigGossipArgs']]:
        return pulumi.get(self, "gossip")

    @gossip.setter
    def gossip(self, value: Optional[pulumi.Input['ConfigGossipArgs']]):
        pulumi.set(self, "gossip", value)

    @property
    @pulumi.getter
    def hugetlbfs(self) -> Optional[pulumi.Input['ConfigHugeTLBFSArgs']]:
        return pulumi.get(self, "hugetlbfs")

    @hugetlbfs.setter
    def hugetlbfs(self, value: Optional[pulumi.Input['ConfigHugeTLBFSArgs']]):
        pulumi.set(self, "hugetlbfs", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['ConfigLayoutArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['ConfigLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter
    def ledger(self) -> Optional[pulumi.Input['ConfigLedgerArgs']]:
        return pulumi.get(self, "ledger")

    @ledger.setter
    def ledger(self, value: Optional[pulumi.Input['ConfigLedgerArgs']]):
        pulumi.set(self, "ledger", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input['ConfigLogArgs']]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input['ConfigLogArgs']]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def reporting(self) -> Optional[pulumi.Input['ConfigReportingArgs']]:
        return pulumi.get(self, "reporting")

    @reporting.setter
    def reporting(self, value: Optional[pulumi.Input['ConfigReportingArgs']]):
        pulumi.set(self, "reporting", value)

    @property
    @pulumi.getter
    def rpc(self) -> Optional[pulumi.Input['ConfigRPCArgs']]:
        return pulumi.get(self, "rpc")

    @rpc.setter
    def rpc(self, value: Optional[pulumi.Input['ConfigRPCArgs']]):
        pulumi.set(self, "rpc", value)

    @property
    @pulumi.getter(name="scratchDirectory")
    def scratch_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scratch_directory")

    @scratch_directory.setter
    def scratch_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scratch_directory", value)

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[pulumi.Input['ConfigSnapshotsArgs']]:
        return pulumi.get(self, "snapshots")

    @snapshots.setter
    def snapshots(self, value: Optional[pulumi.Input['ConfigSnapshotsArgs']]):
        pulumi.set(self, "snapshots", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class KeyPairsArgsDict(TypedDict):
        identity: pulumi.Input[str]
        vote_account: pulumi.Input[str]
elif False:
    KeyPairsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeyPairsArgs:
    def __init__(__self__, *,
                 identity: pulumi.Input[str],
                 vote_account: pulumi.Input[str]):
        pulumi.set(__self__, "identity", identity)
        pulumi.set(__self__, "vote_account", vote_account)

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter(name="voteAccount")
    def vote_account(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vote_account")

    @vote_account.setter
    def vote_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "vote_account", value)


