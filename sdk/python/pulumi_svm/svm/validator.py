# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import agave as _agave

__all__ = ['ValidatorArgs', 'Validator']

@pulumi.input_type
class ValidatorArgs:
    def __init__(__self__, *,
                 flags: pulumi.Input['_agave.ValidatorFlagsArgs'],
                 key_pairs: pulumi.Input['_agave.ValidatorKeyPairsArgs'],
                 variant: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Validator resource.
        """
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "key_pairs", key_pairs)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)

    @property
    @pulumi.getter
    def flags(self) -> pulumi.Input['_agave.ValidatorFlagsArgs']:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: pulumi.Input['_agave.ValidatorFlagsArgs']):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter(name="keyPairs")
    def key_pairs(self) -> pulumi.Input['_agave.ValidatorKeyPairsArgs']:
        return pulumi.get(self, "key_pairs")

    @key_pairs.setter
    def key_pairs(self, value: pulumi.Input['_agave.ValidatorKeyPairsArgs']):
        pulumi.set(self, "key_pairs", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant", value)


class Validator(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flags: Optional[pulumi.Input[pulumi.InputType['_agave.ValidatorFlagsArgs']]] = None,
                 key_pairs: Optional[pulumi.Input[pulumi.InputType['_agave.ValidatorKeyPairsArgs']]] = None,
                 variant: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Validator resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ValidatorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Validator resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ValidatorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ValidatorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flags: Optional[pulumi.Input[pulumi.InputType['_agave.ValidatorFlagsArgs']]] = None,
                 key_pairs: Optional[pulumi.Input[pulumi.InputType['_agave.ValidatorKeyPairsArgs']]] = None,
                 variant: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ValidatorArgs.__new__(ValidatorArgs)

            if flags is None and not opts.urn:
                raise TypeError("Missing required property 'flags'")
            __props__.__dict__["flags"] = flags
            if key_pairs is None and not opts.urn:
                raise TypeError("Missing required property 'key_pairs'")
            __props__.__dict__["key_pairs"] = None if key_pairs is None else pulumi.Output.secret(key_pairs)
            __props__.__dict__["variant"] = variant
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["keyPairs"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Validator, __self__).__init__(
            'svm:svm:Validator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Validator':
        """
        Get an existing Validator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ValidatorArgs.__new__(ValidatorArgs)

        __props__.__dict__["flags"] = None
        __props__.__dict__["key_pairs"] = None
        __props__.__dict__["variant"] = None
        return Validator(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def flags(self) -> pulumi.Output['_agave.outputs.ValidatorFlags']:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter(name="keyPairs")
    def key_pairs(self) -> pulumi.Output['_agave.outputs.ValidatorKeyPairs']:
        return pulumi.get(self, "key_pairs")

    @property
    @pulumi.getter
    def variant(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "variant")

