#!/usr/bin/env bash

set -euo pipefail

if [ -z "$BASH_VERSION" ]; then
    echo "FATAL: $0 requires bash to function properly!"
    exit 1
fi

if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
    echo "FATAL: $0 requires bash v4 or greater!"
    exit 1
fi

OPSHROOTDIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")"/.. &>/dev/null && pwd)

apt::env() {
    # Disable interactive frontends by default.
    DEBIAN_FRONTEND=noninteractive
    export DEBIAN_FRONTEND

    : "${SUDO:=sudo --preserve-env=DEBIAN_FRONTEND}"
    : "${APT:=$SUDO apt-get -qy}"
}

apt::update() {
    (
        apt::env
        $APT update "$@"
    )
}

apt::install() {
    (
        apt::env
        $APT install "$@"
    )
}
_OPSH_LIB_BUNDLED=(apt common git ssh step-runner test-harness)
EXIT_FUNCS=()

exit::trap() {
    local i
    for ((i = ${#EXIT_FUNCS[@]} - 1; i >= 0; i--)); do
        ${EXIT_FUNCS[$i]}
    done
}

trap exit::trap EXIT

exit::trigger() {
    EXIT_FUNCS+=("$*")
}

TMPDIR=$(mktemp -d)
export TMPDIR

temp::cleanup() {
    log::debug cleaning up "$TMPDIR"...
    rm -rf "$TMPDIR"
}

exit::trigger temp::cleanup

# shellcheck disable=SC2120 # these options are optional.
temp::file() {
    mktemp -p "$TMPDIR" "$@"
}

# shellcheck disable=SC2120 # these options are optional.
temp::dir() {
    mktemp -d -p "$TMPDIR" "$@"
}

CRED=''
CGRN=''
CYEL=''
CBLU=''
CNONE=''

if [[ -t 1 ]]; then
    CRED='\033[0;31m'
    CGRN='\033[0;32m'
    CYEL='\033[0;32m'
    CBLU='\033[0;34m'
    CNONE='\033[0m'
fi

log::output() {
    local level
    level="$1"
    shift

    printf "$level:\t%s\n" "$*" >&2
}

log::debug() {
    [[ -v DEBUG ]] || return 0

    log::output "${CBLU}DEBUG${CNONE}" "$@"
}

log::info() {
    log::output "${CGRN}INFO${CNONE}" "$@"
}

log::warn() {
    log::output "${CYEL}WARN${CNONE}" "$@"
}

log::error() {
    log::output "${CRED}ERROR${CNONE}" "$@"
}

log::fatal() {
    log::output "${CRED}FATAL${CNONE}" "$@"
    exit 1
}

lib::import::is-bundled() {
    local libfile i
    libfile=$1
    shift

    for i in "${_OPSH_LIB_BUNDLED[@]}"; do
        if [[ $libfile == "$i" ]]; then
            return 0
        fi
    done

    return 1
}

lib::import() {
    local libfile
    for libname in "$@"; do
        if lib::import::is-bundled "$libname"; then
            continue
        fi

        libfile="$OPSHROOTDIR/share/opsh/$libname.bash"
        [[ -f $libfile ]] || log::fatal "library '$libname' not found!"

        # shellcheck disable=SC1090
        source "$libfile"
    done
}
git::repo::version() {
    git describe --tags --dirty 2>/dev/null || git rev-parse --short HEAD
}
export _OPSH_SSH_CONTEXT

ssh::end() {
    [[ -v _OPSH_SSH_CONTEXT ]] || return 0
    eval "$(cat "$_OPSH_SSH_CONTEXT/env")"
    eval "$(ssh-agent -k | grep -v echo)"
    unset _OPSH_SSH_CONTEXT
}

ssh::begin() {
    _OPSH_SSH_CONTEXT=$(temp::dir)
    chmod 700 "$_OPSH_SSH_CONTEXT"

    log::debug "launching local SSH agent..."
    ssh-agent | grep -v echo >"$_OPSH_SSH_CONTEXT/env" 2>/dev/null
    eval "$(cat "$_OPSH_SSH_CONTEXT/env")"

    exit::trigger ssh::end
}

ssh::config() {
    cat >>"$_OPSH_SSH_CONTEXT/config"
}

ssh::background::close() {
    log::debug "closing SSH port forwarding..."

    echo >&"${_OPSH_SSH_COPROC[1]}"
    wait "$_OPSH_SSH_COPROC_PID"
}

ssh::background::run() {
    local response
    log::debug "launching port forwarding..."
    coproc _OPSH_SSH_COPROC { ssh -F "$_OPSH_SSH_CONTEXT/config" "$@" "echo goliath online ; read"; }
    read -r response <&"${_OPSH_SSH_COPROC[0]}"

    [[ $response = "goliath online" ]] || log::fatal "failed to port forward"

    exit::trigger ssh::background::close
}

ssh::key::add() {
    local keyfile
    keyfile=$(temp::file)
    chmod 600 "$keyfile"

    if [[ $# -gt 0 ]]; then
        for i in "$@"; do
            cat "$i" >"$keyfile"
            ssh-add "$keyfile" 2>/dev/null
        done
    else
        cat >"$keyfile"
        ssh-add "$keyfile" 2>/dev/null

    fi
    rm "$keyfile"
}
# Run a series of functions, in order, starting with a prefix.
steps::run() {
    local prefix start name

    prefix=$1
    shift
    start=""

    if [[ $# -gt 0 ]]; then
        start="${prefix}::$1"
        shift
        log::warn "starting steps with $start..."
    fi

    while read -r name; do
        if [[ $name > $start || $name = "$start" ]]; then
            log::info "running step $name..."
            $name
        fi
    done < <(declare -F | grep "$prefix::" | awk '{ print $3; }')
}
# NOTE: This API is in flux.  It will probably change over time.

_TESTING_REGISTERED_FUNCS=()
_TESTING_REGISTERED_DESC=()

testing::register() {
    local func
    func=$1
    shift

    _TESTING_REGISTERED_FUNCS+=("$func")

    if [[ $# -gt 0 ]]; then
        _TESTING_REGISTERED_DESC+=("$*")
    else
        _TESTING_REGISTERED_DESC+=("")
    fi
}

testing::run() {
    echo "TAP version 13"
    echo "1..${#_TESTING_REGISTERED_FUNCS[@]}"

    local res desc outfile n

    outfile=$(temp::file)

    n=1
    for func in "${_TESTING_REGISTERED_FUNCS[@]}"; do
        res=0
        ("$func") >"$outfile" 2>&1 || res=$?

        if [[ $res -ne 0 ]]; then
            echo -n "not "
        fi

        desc="${_TESTING_REGISTERED_DESC[$((n - 1))]}"

        if [[ -z $desc ]]; then
            echo "ok $n"
        else
            echo "ok $n - $desc"
        fi

        if [[ -s $outfile ]]; then
            sed 's:^:# :' <"$outfile"
        fi

        n=$((n + 1))
    done
}

if [[ $# -lt 1 ]]; then
    log::fatal "$0 requires a single argument of the script to run!"
fi

SCRIPTFILE="$1"
shift
[[ -f $SCRIPTFILE ]] || log::fatal "$0 can only run normal files that exist!"

# shellcheck disable=SC2034
SCRIPTDIR=$(dirname -- "$SCRIPTFILE")

BASH_ARGV0=$SCRIPTFILE
# shellcheck disable=SC1090
source "$SCRIPTFILE"
